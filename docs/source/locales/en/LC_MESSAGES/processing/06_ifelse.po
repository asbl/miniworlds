# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-07 17:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: gpt-po v1.1.1\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/processing/06_ifelse.md:1
msgid "Conditionals (If Statements)"
msgstr ""

#: ../../source/processing/06_ifelse.md:3
msgid ""
"You need conditionals whenever your program should behave differently "
"based on a certain condition."
msgstr ""

#: ../../source/processing/06_ifelse.md:7
msgid "First Example"
msgstr ""

#: ../../source/processing/06_ifelse.md:9
msgid ""
"For example, if you want to check whether a player has reached a certain "
"score in your game, you can write:"
msgstr ""

#: ../../source/processing/06_ifelse.md:18
msgid "General Syntax"
msgstr ""

#: ../../source/processing/06_ifelse.md:27
msgid "Boolean Expressions"
msgstr ""

#: ../../source/processing/06_ifelse.md:29
msgid ""
"A **condition** is an expression that evaluates to `True` or `False`. "
"Such expressions are called **boolean expressions**."
msgstr ""

#: ../../source/processing/06_ifelse.md:31
msgid ""
"The simplest boolean expressions are just `True` and `False`. But you "
"usually create them using **comparisons**, for example:"
msgstr ""

#: ../../source/processing/06_ifelse.md:42
msgid "These expressions can include variables and be more complex."
msgstr ""

#: ../../source/processing/06_ifelse.md:44
msgid ""
"⚠️ **Note:** Use `==` for comparisons. A single `=` is used for "
"assignments!"
msgstr ""

#: ../../source/processing/06_ifelse.md:48
msgid "Comparison Operators"
msgstr ""

#: ../../source/processing/06_ifelse.md:50
msgid "Here are the most common comparison operators:"
msgstr ""

#: ../../source/processing/06_ifelse.md:52
msgid "`<` : less than"
msgstr ""

#: ../../source/processing/06_ifelse.md:53
#, fuzzy
msgid "`<=`: less than or equal"
msgstr "`<`: Less than"

#: ../../source/processing/06_ifelse.md:54
#, fuzzy
msgid "`==`: equal"
msgstr "`==`: Equal"

#: ../../source/processing/06_ifelse.md:55
msgid "`>=`: greater than or equal"
msgstr ""

#: ../../source/processing/06_ifelse.md:56
#, fuzzy
msgid "`>` : greater than"
msgstr "`>` Greater than"

#: ../../source/processing/06_ifelse.md:60
#, fuzzy
msgid "Code Blocks"
msgstr "Code Blöcke"

#: ../../source/processing/06_ifelse.md:62
msgid ""
"If you want to run multiple statements when a condition is true, group "
"them in a code block using indentation:"
msgstr ""

#: ../../source/processing/06_ifelse.md:71
msgid ""
"The first two lines will only run if `points > 100`. The last line runs "
"regardless."
msgstr ""

#: ../../source/processing/06_ifelse.md:75
#, fuzzy
msgid "Elif and Else"
msgstr "Elif and Else"

#: ../../source/processing/06_ifelse.md:77
msgid "Use `elif` (else-if) and `else` for alternative branches:"
msgstr ""

#: ../../source/processing/06_ifelse.md:89
msgid "General syntax:"
msgstr ""

#: ../../source/processing/06_ifelse.md:100
msgid ""
"You can use as many `elif` branches as needed. `else` and `elif` are "
"optional."
msgstr ""

#: ../../source/processing/06_ifelse.md:104
msgid "Complete Example"
msgstr ""

#: ../../source/processing/06_ifelse.md:106
msgid ""
"A rectangle moves from right to left. When it reaches the left edge, it "
"should reappear on the right."
msgstr ""

#: ../../source/processing/06_ifelse.md:108
msgid "Initial version:"
msgstr ""

#: ../../source/processing/06_ifelse.md:123
msgid "Now add the logic to reset its position:"
msgstr ""

#: ../../source/processing/06_ifelse.md:142
msgid "Another Example – Simple Flappy Bird"
msgstr ""

#: ../../source/processing/06_ifelse.md:144
msgid "Let’s program a basic version of Flappy Bird."
msgstr ""

#: ../../source/processing/06_ifelse.md:146
msgid "We’ll use a ball that falls down and jumps up on key press:"
msgstr ""

#: ../../source/processing/06_ifelse.md:173
msgid "Add a key press to make the ball jump:"
msgstr ""

#: ../../source/processing/06_ifelse.md:184
#, fuzzy
msgid "Collision Detection"
msgstr "Collisions"

#: ../../source/processing/06_ifelse.md:186
msgid "Now let’s detect if the ball hits the rectangle using a **sensor**:"
msgstr ""

#: ../../source/processing/06_ifelse.md:200
msgid "These lines detect a collision and stop the world:"
msgstr ""

#: ../../source/processing/06_ifelse.md:208
msgid "The final result is a simple Flappy Bird-like game."
msgstr ""

#~ msgid "Verzweigungen"
#~ msgstr "Branches"

#~ msgid ""
#~ "Verzweigungen brauchst du immer dann, "
#~ "wenn du Bedingungen überprüfen willst "
#~ "und davon der Programmfluss abhängen "
#~ "soll."
#~ msgstr ""
#~ "You need branches whenever you want "
#~ "to check conditions and the program "
#~ "flow should depend on them."

#~ msgid "Erstes Beispiel"
#~ msgstr "First example"

#~ msgid ""
#~ "Willst du z.B. in deinem Spiel "
#~ "überpfüen, ob ein bestimmter Punktestand "
#~ "erreicht wurde, so geht dies mit "
#~ "einer Anweisung"
#~ msgstr ""
#~ "If you want to check in your "
#~ "game, for example, whether a certain "
#~ "score has been reached, this can "
#~ "be done with an instruction"

#~ msgid "Allgemeine Syntax"
#~ msgstr "General syntax"

#~ msgid "Allgemein ist dies die Syntax für Verzweigungen:"
#~ msgstr "Generally, this is the syntax for branches:"

#~ msgid "Boolsche Ausdrücke"
#~ msgstr "Boolean expressions"

#~ msgid ""
#~ "Eine Bedingung ist ein Ausdruck, der "
#~ "den Wert `True` oder `False` besitzen"
#~ "  kann - Man nennt solche Ausdrücke"
#~ " *boolsche Ausdrücke*."
#~ msgstr ""
#~ "A condition is an expression that "
#~ "can have the value `True` or "
#~ "`False` - Such expressions are called"
#~ " *boolean expressions*."

#~ msgid ""
#~ "Die einfachsten boolschen Ausdrücke sind "
#~ "`True` und `False`. Weitere Ausdrücke "
#~ "erhälst du i.d.R. mit **Vergleichen**, "
#~ "z.B.:"
#~ msgstr ""
#~ "The simplest boolean expressions are "
#~ "`True` and `False`. You usually get "
#~ "more expressions with **comparisons**, e.g.:"

#~ msgid "Die Ausdrücke können beliebig kompliziert sein und Variablen enthalten."
#~ msgstr "Expressions can be arbitrarily complex and contain variables."

#~ msgid ""
#~ "Achtung: Bei Vergleichen verwendet man "
#~ "immer ein doppeltes Gleichheitszeichen "
#~ "anstelle eines einfachen Gleichheitszeichen"
#~ msgstr ""
#~ "Attention: When making comparisons, always "
#~ "use a double equals sign instead "
#~ "of a single equals sign"

#~ msgid "Vergleiche"
#~ msgstr "Compare"

#~ msgid "Folgende Vergleiche kannst du verwenden:"
#~ msgstr "You can use the following comparisons:"

#~ msgid "`<=` : Kleiner als oder gleich"
#~ msgstr "`<=` : Less than or equal to"

#~ msgid "`>=`: Größer als oder gleich"
#~ msgstr "`>=`: Greater than or equal to"

#~ msgid ""
#~ "Willst du mehrere Anweisungen abhängig "
#~ "von der Bedingung durchführen, so geht"
#~ " dies mit Hilfe von Code-Blöcken. "
#~ "Code-Blöcke sind stets gleichweit "
#~ "eingerückt und alle Anweisungen die "
#~ "entsprechend eingerückt sind, werden"
#~ msgstr ""
#~ "If you want to execute multiple "
#~ "instructions depending on the condition, "
#~ "this can be done using code "
#~ "blocks. Code blocks are always indented"
#~ " equally, and all instructions that "
#~ "are indented accordingly are"

#~ msgid "Beispiel:"
#~ msgstr "Example:"

#~ msgid ""
#~ "Unabhängig von der Punktzahl wird die"
#~ " letzte Code-Zeile auf jeden Fall "
#~ "ausgeführt. Die beiden eingerückten Zeilen "
#~ "werden allerdings nur ausgeführt, wenn "
#~ "der Punktestand größer als 100 ist."
#~ msgstr ""
#~ "Regardless of the score, the last "
#~ "line of code will be executed in"
#~ " any case. However, the two indented"
#~ " lines will only be executed if "
#~ "the score is greater than 100."

#~ msgid "Mit elif und else kannst du Alternativen einbauen. Dies geht z.B. so:"
#~ msgstr ""
#~ "With elif and else, you can "
#~ "incorporate alternatives. This can be "
#~ "done, for example, like this:"

#~ msgid "Die allgemeine Syntax ist:"
#~ msgstr "The general syntax is:"

#~ msgid ""
#~ "Sowohl elif als auch else können "
#~ "dabei weggelassen werden. Es sind auch"
#~ " mehrere elif-Blöcke möglich."
#~ msgstr ""
#~ "Both elif and else can be omitted."
#~ " Multiple elif blocks are also "
#~ "possible."

#~ msgid "Ausführliches Beispiel"
#~ msgstr "Detailed example"

#~ msgid ""
#~ "Ein Rechteck soll sich von rechts "
#~ "nach links bewegen. Wenn es die "
#~ "linke Seite erreicht, soll es wieder "
#~ "ganz rechts auftauchen."
#~ msgstr ""
#~ "A rectangle should move from right "
#~ "to left. When it reaches the left"
#~ " side, it should reappear on the "
#~ "far right."

#~ msgid "Die erste Variante sieht so aus:"
#~ msgstr "The first variant looks like this:"

#~ msgid "Es fehlt noch der entscheidende Teil."
#~ msgstr "The crucial part is still missing."

#~ msgid "Diesen kann man so formulieren:"
#~ msgstr "This can be formulated as follows:"

#~ msgid ""
#~ "`Falls die x-Koordinate den Wert 0 "
#~ "erreicht, setze das Rechteck wieder nach"
#~ " rechts`"
#~ msgstr ""
#~ "`If the x-coordinate reaches the value"
#~ " 0, move the rectangle back to "
#~ "the right`"

#~ msgid "Dies kann man direkt in Python übersetzen:"
#~ msgstr "This can be translated directly in Python:"

#~ msgid "Ein weiteres Beispiel - Ein simples Flappy-Bird"
#~ msgstr "Another example - A simple Flappy Bird"

#~ msgid "Wir wollen eine Art (einfaches) Flappy-Bird programmieren."
#~ msgstr "We want to program a kind of (simple) Flappy Bird."

#~ msgid ""
#~ "Unser Hauptcharakter soll ein Ball sein,"
#~ " der bei Tastendruck sich nach oben"
#~ " bewegt. Dies können wir wie folgt"
#~ " realisieren:"
#~ msgstr ""
#~ "Our main character should be a "
#~ "ball that moves upwards when a key"
#~ " is pressed. We can achieve this "
#~ "as follows:"

#~ msgid "Der Ball fällt und fällt immer schneller."
#~ msgstr "The ball falls and falls faster and faster."

#~ msgid "In der Zeile:"
#~ msgstr "In der Zeile:"

#~ msgid ""
#~ "wird die Geschwindigkeit erhöht, mit der"
#~ " der Ball fällt.  Im ersten Schritt"
#~ " soll sich der Ball nach oben "
#~ "bewegen können, wenn eine Taste gedrückt"
#~ " wird."
#~ msgstr ""
#~ "the speed at which the ball falls"
#~ " is increased.  In the first step,"
#~ " the ball should be able to "
#~ "move upwards when a key is "
#~ "pressed."

#~ msgid ""
#~ "Nun wollen wir nicht nur einfach "
#~ "Positionen vergleichen, sondern auch die "
#~ "Lage von Objekten zueinander."
#~ msgstr ""
#~ "Now we want not only to compare"
#~ " positions, but also the location of"
#~ " objects relative to each other."

#~ msgid "Dafür können wir verschiedene `sensor`-Methoden verwenden."
#~ msgstr "For this, we can use different `sensor` methods."

#~ msgid "Dies geht z.B. so:"
#~ msgstr "This goes, for example, like this:"

#~ msgid "Die Logik befindet sich in folgenden Zeilen:"
#~ msgstr "The logic is in the following lines:"

#~ msgid ""
#~ "Die erste Zeile überprüft mit einem "
#~ "Sensor, welches Actor an der eigenen "
#~ "Position gefunden wurde (und gibt das"
#~ " erste gefundene Actor zurück). "
#~ "Anschließend wird das so gefundene Actor"
#~ " mit dem Rechteck verglichen. Wenn "
#~ "dies die gleichen Objekte sind, dann "
#~ "wird das Spiel abgebrochen."
#~ msgstr ""
#~ "The first line checks with a "
#~ "sensor which actor was found at "
#~ "its own position (and returns the "
#~ "first found actor). Then, the actor "
#~ "found in this way is compared with"
#~ " the rectangle. If these are the "
#~ "same objects, then the game is "
#~ "aborted."

#~ msgid "So sieht das Flappy-Bird-Spiel nun aus:"
#~ msgstr "This is what the Flappy Bird game looks like now:"

