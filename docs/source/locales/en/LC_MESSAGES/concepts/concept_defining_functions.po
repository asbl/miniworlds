# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-07 17:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: gpt-po v1.1.1\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/concepts/concept_defining_functions.md:1
#, fuzzy
msgid "Concept: Functions, Parameters, and Return Values"
msgstr "Concept: Functions, Parameters, and Return Value"

#: ../../source/concepts/concept_defining_functions.md:3
msgid ""
"So far, you’ve used methods like `on_setup` or `act`, which belong to a "
"`World` or an `Actor`. Now you’ll learn how to create your **own "
"functions**. Functions are *subroutines* that allow you to **reuse code**"
" instead of repeating it."
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:8
msgid "First Example"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:10
msgid "You want to create four red circles like this:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:29
msgid ""
"This works, but if you want to make **all four green**, you’d need to "
"change **four lines**. Instead, you can use a function:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:51
#, fuzzy
msgid "General: Defining Functions"
msgstr "General: Defining Functions"

#: ../../source/concepts/concept_defining_functions.md:53
msgid ""
"When you want to automate complex tasks—like creating multiple actors—you"
" define a function:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:60
#: ../../source/concepts/concept_defining_functions.md:194
msgid "Example:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:68
msgid "**Explanation:**"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:70
#, fuzzy
msgid "**Function name**: `create_circle`"
msgstr "The function is named **Namen** `create_circle`"

#: ../../source/concepts/concept_defining_functions.md:71
msgid "**Parameters**: `x`, `y` → passed in when calling the function"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:72
msgid "**Function body**: runs from top to bottom when the function is called"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:76
msgid "Calling Functions"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:78
msgid "To use a function, write:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:84
msgid "For example:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:92
msgid "Drawing Complex Figures"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:94
msgid "You can use functions to draw complex figures easily:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:119
msgid "Creating Actors Automatically"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:121
msgid ""
"This example shows how you can place multiple actors efficiently using "
"functions:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:155
msgid "Registering Behavior in Functions"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:157
msgid ""
"This example creates random **raindrops**, where each has behaviors "
"(registered with `@c.register`) defined **within** the function:"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:189
msgid "Return Values"
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:191
msgid ""
"So far, functions just did something. With a **return value**, you can "
"get information **back** from a function."
msgstr ""

#: ../../source/concepts/concept_defining_functions.md:206
msgid ""
"Another example: color a circle red if it’s on the **left half** of the "
"screen."
msgstr ""

#~ msgid ""
#~ "Du hast bisher Methoden verwendet, die"
#~ " zu einem World oder einem Actor "
#~ "gehören, z.B. ``on_setup``, ``act``."
#~ msgstr ""
#~ "You have used methods so far that"
#~ " belong to a World or an Actor,"
#~ " e.g., ``on_setup``, ``act``."

#~ msgid ""
#~ "Jetzt lernst du eigene Funktionen zu "
#~ "erstellen. Funktionen sind `Unterprogramme` "
#~ "die dir ermöglichen, Code wiederzuverwenden,"
#~ "  anstatt ihn immer wieder zu "
#~ "schreiben."
#~ msgstr ""
#~ "Now you are learning to create "
#~ "your own functions. Functions are "
#~ "`subprograms` that allow you to reuse"
#~ " code instead of writing it over "
#~ "and over again."

#~ msgid "Erstes Beispiel"
#~ msgstr "First example"

#~ msgid ""
#~ "du möchtest vier rote Kreise erstellen,"
#~ " so wie im folgenden Bild "
#~ "dargestellt:"
#~ msgstr "you want to create four red circles, as shown in the following image:"

#~ msgid "Dies geht z.B. so:"
#~ msgstr "This works, for example, like this:"

#~ msgid "![4 red circles](../_images/processing/4red_circles.png)"
#~ msgstr "![4 red circles](../_images/processing/4red_circles.png)"

#~ msgid "4 red circles"
#~ msgstr "4 red circles"

#~ msgid ""
#~ "Das Programm ist korrekt. Wenn nun "
#~ "aber alle vier Kreise grün sein "
#~ "sollen, dann musst du das Programm "
#~ "an vier Stellen verändern."
#~ msgstr ""
#~ "The program is correct. However, if "
#~ "all four circles are supposed to "
#~ "be green, then you need to change"
#~ " the program in four places."

#~ msgid ""
#~ "Stattdessen kann man das Erstellen des"
#~ " Kreises und das festlegen der Farbe"
#~ " in Unterprogramme auslagern:"
#~ msgstr ""
#~ "Instead, you can outsource the creation"
#~ " of the circle and the setting "
#~ "of the color to subroutines:"

#~ msgid "Hier wurde eine Funtion `create_circle` definiert."
#~ msgstr "A function `create_circle` was defined here."

#~ msgid ""
#~ "Die Funktion erhält als **Übergabeparameter**"
#~ " die Werte `x` und `y` - An "
#~ "dieser Stelle soll der Kreis erstellt"
#~ " werden."
#~ msgstr ""
#~ "The function receives the values `x` "
#~ "and `y` as **parameters** - At "
#~ "this point, the circle should be "
#~ "created."

#~ msgid ""
#~ "Im **Methodenkörper** wird zuerst ein "
#~ "Kreis erstellt und diesem anschließend "
#~ "eine Farbe zugewiesen."
#~ msgstr ""
#~ "In the **method body**, a circle "
#~ "is first created and then assigned "
#~ "a color."

#~ msgid ""
#~ "Die Funktion wird mit Hilfe ihres "
#~ "**Namens** und mit Übergabe der "
#~ "**Argumente** (z.B. 20, 20) aufgerufen."
#~ msgstr ""
#~ "The function is called using its "
#~ "**name** and passing the **arguments** "
#~ "(e.g. 20, 20)."

#~ msgid ""
#~ "Oft willst du komplizierte Dinge "
#~ "automatisieren, z.B. das Anlegen von "
#~ "Actors."
#~ msgstr ""
#~ "Often you want to automate complicated"
#~ " things, such as the creation of "
#~ "actors."

#~ msgid ""
#~ "Dies geht, indem du Funktionen selbst"
#~ " definierst - Dies geht im "
#~ "Allgemeinen so:"
#~ msgstr ""
#~ "This is done by defining functions "
#~ "yourself - This is generally done "
#~ "like this:"

#~ msgid "z.B.:"
#~ msgstr "e.g.:"

#~ msgid ""
#~ "Deine Funktion besteht aus einer "
#~ "*Signatur* und einem *Funktionskörper*."
#~ msgstr "Your function consists of a *signature* and a *function body*."

#~ msgid ""
#~ "Die Signatur ist die erste Zeile "
#~ "der Funktion. Sie enthält alle "
#~ "Informationen die du brauchst um die "
#~ "Funktion aufzurufen. Dies ist der "
#~ "**Name** und **Parameter**. Der Name "
#~ "dieser Funktion ist `create_actor`, die "
#~ "Parameter sind `x`und `y`.  Parameter "
#~ "werden benötigt um der Funktion weitere"
#~ " Informationen zu übergeben. Im Beispiel"
#~ " wird die Information übergeben, *wo* "
#~ "das Objekt erstellt werden soll."
#~ msgstr ""
#~ "The signature is the first line of"
#~ " the function. It contains all the"
#~ " information you need to call the "
#~ "function. This includes the **name** and"
#~ " **parameters**. The name of this "
#~ "function is `create_actor`, and the "
#~ "parameters are `x` and `y`. Parameters"
#~ " are needed to pass additional "
#~ "information to the function. In the "
#~ "example, the information about *where* "
#~ "the object should be created is "
#~ "passed."

#~ msgid ""
#~ "Der Funktionskörper ist ein Code-Block."
#~ " Er enthält alle Befehle, die bei "
#~ "Aufruf der Funktion  nacheinander abgearbeitet"
#~ " werden. Hier wird beim Funktionsaufruf "
#~ "zuerst ein Kreis erzeugt und "
#~ "anschließend  werden die Farbe des "
#~ "Kreises festgelegt."
#~ msgstr ""
#~ "The function body is a block of"
#~ " code. It contains all the commands"
#~ " that are executed sequentially when "
#~ "the function is called. Here, a "
#~ "circle is first created when the "
#~ "function is called, and then the "
#~ "color of the circle is set."

#~ msgid ""
#~ "Die Befehle werden beim Aufruf der "
#~ "Funktion von oben nach unten "
#~ "abgearbeitet."
#~ msgstr ""
#~ "The commands are processed from top "
#~ "to bottom when the function is "
#~ "called."

#~ msgid "Aufruf von Funktionen"
#~ msgstr "Calling functions"

#~ msgid ""
#~ "Eine Funktion wird mit Hilfe des "
#~ "Namens aufgerufen. Dabei übergibst du "
#~ "der Funktion die  als Parameter "
#~ "definierten Argumente."
#~ msgstr ""
#~ "A function is called using its "
#~ "name. You pass the arguments defined "
#~ "as parameters to the function."

#~ msgid "Allgemein schreibt man: `method_name(<parameter>)`"
#~ msgstr "Generally, one writes: `method_name(<parameter>)`"

#~ msgid "Dies kann z.B. so aussehen:"
#~ msgstr "This can look like this, for example:"

#~ msgid "Hier wird ein Actor an der Position `x=4` und `y=2` angelegt."
#~ msgstr "An actor is created at position `x=4` and `y=2`."

#~ msgid "Komplexe Figuren zeichen"
#~ msgstr "Draw complex figures"

#~ msgid "Mit  Hilfe von Funktionen kannst du komplexe Figuren zeichnen:"
#~ msgstr "With the help of functions, you can draw complex figures:"

#~ msgid ""
#~ "In der Funktion `create_face` wird ein"
#~ " Gesicht erzeugt.  Dieses kann anschließend"
#~ " an unterschiedlichen Stellen erzeugt "
#~ "werden."
#~ msgstr ""
#~ "In the function `create_face`, a face"
#~ " is created. This can then be "
#~ "generated in different locations."

#~ msgid "![faces](../_images/processing/face3.png)"
#~ msgstr "![faces](../_images/processing/face3.png)"

#~ msgid "faces"
#~ msgstr "faces"

#~ msgid "Actors automatisiert erstellen"
#~ msgstr "Create actors automatically"

#~ msgid "Mit Hilfe von Funktionen kannst du das erstellen von Actors abkürzen:"
#~ msgstr "With the help of functions, you can abbreviate the creation of actors:"

#~ msgid ""
#~ "Es werden hier 10 Actors mit 10"
#~ " Befehlen angelegt. Ohne Funktionen hättest"
#~ " du 30 Befehle benötigt."
#~ msgstr ""
#~ "Here, 10 actors are created with "
#~ "10 commands. Without functions, you "
#~ "would have needed 30 commands."

#~ msgid "Ausgabe:"
#~ msgstr "Output:"

#~ msgid "![walls](../_images/walls.png)"
#~ msgstr "![walls](../_images/walls.png)"

#~ msgid "walls"
#~ msgstr "walls"

#~ msgid "Eigenschaften und Methoden registrieren."
#~ msgstr "Register properties and methods."

#~ msgid "Das folgende Programm erstellt automatisch \"Regentropfen\"."
#~ msgstr "The following program automatically creates \"raindrops\"."

#~ msgid ""
#~ "In der funktion raindrop werden nicht"
#~ " nur Eigenschaften für jeden Tropfen "
#~ "festgelegt, sondern auch Methoden registriert."
#~ msgstr ""
#~ "In the raindrop function, not only "
#~ "are properties set for each drop, "
#~ "but methods are also registered."

#~ msgid "Rückgabewerte"
#~ msgstr "Return values"

#~ msgid ""
#~ "Die bisherigen Funktionen haben ein "
#~ "Unterprogramm ausgeführt und dabei ggf. "
#~ "Informationen über Parameter erhalten."
#~ msgstr ""
#~ "The previous functions executed a "
#~ "subroutine and possibly received information"
#~ " via parameters."

#~ msgid "Mit Hilfe von Rückgabewerten kannst du auch Informationen zurückgeben."
#~ msgstr "With the help of return values, you can also return information."

#~ msgid "Im einfachen Fall sieht dies so aus:"
#~ msgstr "In the simple case, this looks like:"

#~ msgid ""
#~ "In der letzten Zeile passiert folgendes:"
#~ " Bevor die Funktion `print` ausgeführt "
#~ "werden kann, muss die  Funktion "
#~ "`is_even` ausgewertet werden. Das Ergebnis "
#~ "der Funktion (Hier: `True`) wird dann"
#~ "  anstelle des Funktionsaufrufs eingesetzt."
#~ msgstr ""
#~ "In the last line, the following "
#~ "happens: Before the `print` function can"
#~ " be executed, the `is_even` function "
#~ "must be evaluated. The result of "
#~ "the function (Here: `True`) is then "
#~ "substituted in place of the function "
#~ "call."

#~ msgid ""
#~ "Das folgende Programm erstelllt zufällig "
#~ "Kreise. Wenn diese links von der "
#~ "Mitte sind,  werden sie rot eingefärbt,"
#~ " ansonsten weiß."
#~ msgstr ""
#~ "The following program randomly creates "
#~ "circles. If they are to the left"
#~ " of the center, they are colored "
#~ "red, otherwise white."

#~ msgid "![is left](../_images/processing/is_left.png)"
#~ msgstr "![is left](../_images/processing/is_left.png)"

#~ msgid "is left"
#~ msgstr "is left"

