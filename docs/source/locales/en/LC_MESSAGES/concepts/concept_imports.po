# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-07 17:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: gpt-po v1.1.1\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/concepts/concept_imports.md:1
#, fuzzy
msgid "Concept: Imports"
msgstr "Concept: Imports"

#: ../../source/concepts/concept_imports.md:3
msgid ""
"With `import`, you can include libraries and use the classes and "
"functions they provide. There are different ways to import libraries in "
"Python."
msgstr ""

#: ../../source/concepts/concept_imports.md:8
msgid "Different Types of Imports"
msgstr ""

#: ../../source/concepts/concept_imports.md:10
msgid ""
"In Python, you can import libraries in several ways. All of the following"
" lines are valid:"
msgstr ""

#: ../../source/concepts/concept_imports.md:19
msgid ""
"In the first form `import miniworlds`, you need to prefix everything with"
" `miniworlds.` — e.g., `miniworlds.World()`."
msgstr ""

#: ../../source/concepts/concept_imports.md:21
msgid ""
"Alternatively, you can write `from miniworlds import *`, which allows you"
" to omit the `miniworlds.` prefix and write `World()` directly."
msgstr ""

#: ../../source/concepts/concept_imports.md:23
msgid "Here’s how a simple program would look using `import miniworlds`:"
msgstr ""

#: ../../source/concepts/concept_imports.md:39
#, fuzzy
msgid "Explicit vs. Implicit Imports"
msgstr "Explicit vs. Implicit."

#: ../../source/concepts/concept_imports.md:41
msgid ""
"Using `miniworlds.object` may seem more verbose, but it is the "
"**preferred** method in Python."
msgstr ""

#: ../../source/concepts/concept_imports.md:43
msgid ""
"Why? Because it makes your code **more readable** — it’s immediately "
"clear which library a function or class comes from."
msgstr ""

#: ../../source/concepts/concept_imports.md:45
msgid ""
"For example, if you define your own class named `TiledWorld`, it would "
"clash with the imported name. By using the prefix "
"(`miniworlds.TiledWorld`), you avoid confusion."
msgstr ""

#: ../../source/concepts/concept_imports.md:48
msgid "This follows the Python Zen principle:"
msgstr ""

#: ../../source/concepts/concept_imports.md:50
#, fuzzy
msgid "**Explicit is better than implicit.**"
msgstr "Explicit vs. Implicit."

#: ../../source/concepts/concept_imports.md:54
#, fuzzy
msgid "Aliases"
msgstr "Aliase"

#: ../../source/concepts/concept_imports.md:56
msgid "The third option is a **compromise** between the two styles."
msgstr ""

#: ../../source/concepts/concept_imports.md:58
msgid ""
"If you find `miniworlds` too long, you can use an alias — for example, "
"`mwm`:"
msgstr ""

#: ../../source/concepts/concept_imports.md:74
msgid "Notes for Teachers"
msgstr ""

#: ../../source/concepts/concept_imports.md:76
msgid ""
"Both styles of import are used throughout these tutorials. As a teacher, "
"you may wish to **standardize** one approach for beginners."
msgstr ""

#: ../../source/concepts/concept_imports.md:79
msgid ""
"For students who are new to Python, it might be easier to **avoid "
"advanced import styles** (like `from ... import *`) at first."
msgstr ""

#~ msgid ""
#~ "Mit import kannst du Bibliotheken "
#~ "importieren und die dort abgelegten "
#~ "Klassen und Funktionen verwenden. Es "
#~ "gibt unterschiedliche Arten, wie du "
#~ "Bibliotheken importieren kannst:"
#~ msgstr ""
#~ "With import, you can import libraries"
#~ " and use the classes and functions"
#~ " stored there. There are different "
#~ "ways you can import libraries:"

#~ msgid "Unterschiedliche Arten von Imports"
#~ msgstr "Different types of imports"

#~ msgid ""
#~ "Man kann in Python auf unterschiedliche"
#~ " Arten Bibliotheken importieren.  Die "
#~ "folgenden 3 Anweisungen sind alle "
#~ "erlaubt:"
#~ msgstr ""
#~ "There are different ways to import "
#~ "libraries in Python. The following 3 "
#~ "statements are all allowed:"

#~ msgid ""
#~ "Mit der hier verwendeten Version `import"
#~ " miniworlds` musst du jedesmal "
#~ "`miniworlds.objekt` schreiben, wenn du ein "
#~ "Objekt aus der miniworlds-Bibliothek "
#~ "importierst. Stattdessen kannst du auch "
#~ "`from miniworlds import *` schreiben -"
#~ " Dann kannst du miniworlds weglassen."
#~ msgstr ""
#~ "With the version used here `import "
#~ "miniworlds`, you have to write "
#~ "`miniworlds.object` every time you import "
#~ "an object from the miniworlds library."
#~ " Instead, you can also write `from"
#~ " miniworlds import *` - Then you "
#~ "can omit miniworlds."

#~ msgid ""
#~ "So sähe das erste Programm aus, "
#~ "wenn wir `import miniworlds` geschrieben "
#~ "hätten:"
#~ msgstr ""
#~ "This is what the first program "
#~ "would look like if we had written"
#~ " `import miniworlds`:"

#~ msgid ""
#~ "Die Variante jedesmal `miniworlds.objekt` "
#~ "anstatt einfach nur `objekt` zu "
#~ "schreiben mag zwar zuerst hässlicher "
#~ "erscheinen, weil man mehr Text schreiben"
#~ " muss."
#~ msgstr ""
#~ "The variant of writing `miniworlds.objekt` "
#~ "each time instead of just `objekt` "
#~ "may seem uglier at first because "
#~ "you have to write more text."

#~ msgid ""
#~ "Dies ist trotzdem in Python die "
#~ "bevorzugte Variante, da so erkennbar "
#~ "ist, welche Objekte aus welcher "
#~ "Bibliothek importiert wurden."
#~ msgstr ""
#~ "This is still the preferred variant "
#~ "in Python, as it makes it clear"
#~ " which objects were imported from "
#~ "which library."

#~ msgid ""
#~ "Es könnte ja z.B. sein, dass du"
#~ " in deinem Programm eine Klasse "
#~ "`TiledWorld` definierst und damit zweimal "
#~ "der gleiche Name verwendet wird - "
#~ "Für Leser deines Programms wird es "
#~ "dann schwierig nachzuvollziehen, worauf sich"
#~ " der Name TiledWorld bezieht."
#~ msgstr ""
#~ "For example, it could be that you"
#~ " define a class `TiledWorld` in your"
#~ " program, and thus the same name "
#~ "is used twice - For readers of "
#~ "your program, it will then be "
#~ "difficult to understand what the name"
#~ " TiledWorld refers to."

#~ msgid ""
#~ "Im Python-Zen gilt das Prinzip "
#~ "**explicit over implicit** - Dies "
#~ "bedeutet, dass oft mehr Code besser "
#~ "ist, wenn dieser dadurch besser "
#~ "nachvollziehbar wird."
#~ msgstr ""
#~ "In Python's Zen, the principle "
#~ "**explicit over implicit** applies - "
#~ "This means that often more code is"
#~ " better if it becomes more "
#~ "understandable as a result."

#~ msgid ""
#~ "Die dritte Variante ist ein Kompromiss"
#~ " zwischen erster und zweiter Variante. "
#~ "Wenn die der Name `miniworlds` zu "
#~ "lang ist, dann kannst du einen "
#~ "Alias definieren, z.B. `mwm`"
#~ msgstr ""
#~ "The third option is a compromise "
#~ "between the first and second options."
#~ " If the name `miniworlds` is too "
#~ "long, you can define an alias, "
#~ "e.g., `mwm`"

#~ msgid "Das Programm würde dann folgendermaßen aussehen:"
#~ msgstr "The program would then look like this:"

#~ msgid "Hinweise für Lehrer"
#~ msgstr "Notes for teachers"

#~ msgid ""
#~ "Es werden in diesen Tutorials beide "
#~ "Varianten verwendet. Als Lehrer sollte "
#~ "man sich aber entscheiden, welche "
#~ "Variante man für den Einstieg bevorzugt."
#~ msgstr ""
#~ "Both variants are used in these "
#~ "tutorials. However, as a teacher, one"
#~ " should decide which variant is "
#~ "preferred for the introduction."

#~ msgid ""
#~ "Für Anfänger kann es hilfreich sein, "
#~ "auf diese Art von Importen zu "
#~ "verzichten."
#~ msgstr "For beginners, it can be helpful to refrain from this type of imports."

