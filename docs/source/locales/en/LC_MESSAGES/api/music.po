# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-25 09:40+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/api/music.md:1
msgid "Sound and Music"
msgstr ""

#: ../../source/api/music.md:3
msgid "Music"
msgstr ""

#: ../../source/api/music.md
msgid "Public Methods:"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<miniworlds.worlds.manager.music_manager.MusicManager.__init__>`\\ "
"\\(app\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`pause "
"<miniworlds.worlds.manager.music_manager.MusicManager.pause>`\\ \\(\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.pause:1 of
msgid "pauses a music"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`is_playing "
"<miniworlds.worlds.manager.music_manager.MusicManager.is_playing>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.is_playing:1 of
msgid "returns True, if world is playing a music (and music ist not paused)"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`get_path "
"<miniworlds.worlds.manager.music_manager.MusicManager.get_path>`\\ \\(\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.get_path:1 of
msgid "gets path to current music"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`play "
"<miniworlds.worlds.manager.music_manager.MusicManager.play>`\\ "
"\\(\\[path\\, loop\\]\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.play:1 of
msgid "plays a music from path"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`stop "
"<miniworlds.worlds.manager.music_manager.MusicManager.stop>`\\ \\(\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.stop:1 of
msgid "stops a music"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`set_volume "
"<miniworlds.worlds.manager.music_manager.MusicManager.set_volume>`\\ "
"\\(volume\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.set_volume:1 of
msgid "sets volume of music"
msgstr ""

#: ../../None:10:<autosummary>:1
msgid ""
":py:obj:`get_volume "
"<miniworlds.worlds.manager.music_manager.MusicManager.get_volume>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:10:<autosummary>:1
#: miniworlds.worlds.manager.music_manager.MusicManager.get_volume:1 of
msgid "gets volume of music"
msgstr ""

#: ../../source/api/music.md
msgid "Rückgabetyp"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.get_path:3 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`str\\``"
msgstr ""

#: ../../source/api/music.md
msgid "Rückgabe"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.get_path:5 of
msgid "The path to current music file"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.get_volume:3 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`float\\``"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.get_volume:5 of
msgid "current volume"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.is_playing:5 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr ""

#: ../../source/api/music.md
#: miniworlds.worlds.manager.music_manager.MusicManager.play
#: miniworlds.worlds.manager.sound_manager.SoundManager.play of
msgid "Parameter"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.play:3 of
msgid "The path to the music"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.play:4 of
msgid "Specifies how often the music must be repeated (-1: infinitely often)"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.play:6
#: miniworlds.worlds.manager.music_manager.MusicManager.stop:3
#: miniworlds.worlds.manager.sound_manager.SoundManager.play:6 of
msgid "Returns:"
msgstr ""

#: miniworlds.worlds.manager.music_manager.MusicManager.set_volume:3 of
msgid "Volume between 0 and 100"
msgstr ""

#: ../../source/api/music.md:11
msgid "Sound"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<miniworlds.worlds.manager.sound_manager.SoundManager.__init__>`\\ "
"\\(app\\)"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ""
":py:obj:`play "
"<miniworlds.worlds.manager.sound_manager.SoundManager.play>`\\ "
"\\(\\[path\\, volume\\]\\)"
msgstr ""

#: ../../None:5:<autosummary>:1
#: miniworlds.worlds.manager.sound_manager.SoundManager.play:1 of
msgid "plays a sound from path"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ""
":py:obj:`register "
"<miniworlds.worlds.manager.sound_manager.SoundManager.register>`\\ "
"\\(\\[path\\]\\)"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid "Registers a sound."
msgstr ""

#: miniworlds.worlds.manager.sound_manager.SoundManager.play:3
#: miniworlds.worlds.manager.sound_manager.SoundManager.register:4 of
msgid "The path to the sound"
msgstr ""

#: miniworlds.worlds.manager.sound_manager.SoundManager.play:4 of
msgid "The volume, the sound should be played (0 min, 100 max)"
msgstr ""

#: miniworlds.worlds.manager.sound_manager.SoundManager.register:1 of
msgid ""
"Registers a sound. It can slow down the performance, if sounds are loaded"
" on the fly and it can be faster to register all sounds at program start."
msgstr ""

