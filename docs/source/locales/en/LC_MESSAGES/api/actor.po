# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-08 06:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/api/actor.md:1
msgid "Actor"
msgstr ""

#: miniworlds.actors.actor.Actor:1 of
msgid ""
"Actors are objects on your world. Actors can move around the world and "
"have sensors to detect other actors."
msgstr ""

#: miniworlds.actors.actor.Actor:3 of
msgid "The appearance of a actor is determined by its costume."
msgstr ""

#: miniworlds.actors.actor.Actor:6 miniworlds.actors.actor.Actor.add_costume:9
#: miniworlds.actors.actor.Actor.animate_loop:6
#: miniworlds.actors.actor.Actor.border:10
#: miniworlds.actors.actor.Actor.border_color:17
#: miniworlds.actors.actor.Actor.bounce_from_border:12
#: miniworlds.actors.actor.Actor.costume_count:4
#: miniworlds.actors.actor.Actor.detect:13
#: miniworlds.actors.actor.Actor.detect_actors_at:4
#: miniworlds.actors.actor.Actor.direction:31
#: miniworlds.actors.actor.Actor.flip_x:6
#: miniworlds.actors.actor.Actor.height:6
#: miniworlds.actors.actor.Actor.is_flipped:9
#: miniworlds.actors.actor.Actor.is_rotatable:9
#: miniworlds.actors.actor.Actor.move:11
#: miniworlds.actors.actor.Actor.move_to:11
#: miniworlds.actors.actor.Actor.on_clicked_left:4
#: miniworlds.actors.actor.Actor.on_clicked_right:4
#: miniworlds.actors.actor.Actor.on_detecting_actor:7
#: miniworlds.actors.actor.Actor.on_detecting_borders:7
#: miniworlds.actors.actor.Actor.on_detecting_world:4
#: miniworlds.actors.actor.Actor.on_key_down:8
#: miniworlds.actors.actor.Actor.on_key_pressed:10
#: miniworlds.actors.actor.Actor.on_mouse_left:12
#: miniworlds.actors.actor.Actor.on_mouse_left_released:4
#: miniworlds.actors.actor.Actor.on_mouse_motion:11
#: miniworlds.actors.actor.Actor.on_mouse_right:12
#: miniworlds.actors.actor.Actor.on_not_detecting_world:4
#: miniworlds.actors.actor.Actor.point_towards_position:10
#: miniworlds.actors.actor.Actor.register_message:7
#: miniworlds.actors.actor.Actor.remove:4
#: miniworlds.actors.actor.Actor.send_message:6
#: miniworlds.actors.actor.Actor.set_direction:19
#: miniworlds.actors.actor.Actor.stop_animation:6
#: miniworlds.actors.actor.Actor.stroke_color:17
#: miniworlds.actors.actor.Actor.switch_costume:8
#: miniworlds.actors.actor.Actor.turn_left:9
#: miniworlds.actors.actor.Actor.turn_right:6
#: miniworlds.actors.actor.Actor.undo_move:8
#: miniworlds.actors.actor.Actor.width:6 of
msgid "Examples"
msgstr ""

#: miniworlds.actors.actor.Actor:7 of
msgid "Create a actor:"
msgstr ""

#: miniworlds.actors.actor.Actor:19 of
msgid "Create a actor with an image:"
msgstr ""

#: miniworlds.actors.actor.Actor:31 of
msgid "Create actor as instance from an custom class"
msgstr ""

#: miniworlds.actors.actor.Actor:46 of
msgid "Create a Actor at current mouse position:"
msgstr ""

#: miniworlds.actors.actor.Actor:62 of
msgid "See: :doc:`Actor <../api/actor>`"
msgstr ""

#: miniworlds.actors.actor.Actor:63 of
msgid "See: :doc:`Shapes <../api/actor_shapes>`"
msgstr ""

#: miniworlds.actors.actor.Actor:64 of
msgid "See: :doc:`TextActors and NumberActors <../api/actor_text>`"
msgstr ""

#: ../../source/api/actor.md
msgid "Public Data Attributes:"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`actor_count <miniworlds.actors.actor.Actor.actor_count>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`class_image <miniworlds.actors.actor.Actor.class_image>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`origin <miniworlds.actors.actor.Actor.origin>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`collision_type <miniworlds.actors.actor.Actor.collision_type>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.collision_type:1
#: of
msgid "collision_type specifies how collisions should be checked:"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`is_blockable <miniworlds.actors.actor.Actor.is_blockable>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.is_blockable:1
#: miniworlds.actors.actor.Actor.is_blocking:1 of
msgid ""
"A actor with the property ``is_blockable`` cannot move through actors "
"with the property ``is_blocking``."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`is_blocking <miniworlds.actors.actor.Actor.is_blocking>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`layer <miniworlds.actors.actor.Actor.layer>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.layer:1 of
msgid "Defines the layer on which the actor is drawn if several actors overlap."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`last_position <miniworlds.actors.actor.Actor.last_position>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.last_position:1
#: of
msgid "Actor position in last frame"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`last_direction <miniworlds.actors.actor.Actor.last_direction>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`costume_count <miniworlds.actors.actor.Actor.costume_count>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.costume_count:1
#: of
msgid "Returns number of costumes of actor, 0 if actor has no costume"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`is_flipped <miniworlds.actors.actor.Actor.is_flipped>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid "When a actor is mirrored, it is mirrored across the y-axis."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`costume <miniworlds.actors.actor.Actor.costume>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.costume:1 of
msgid "Gets the costume of the actor, if available."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`costumes <miniworlds.actors.actor.Actor.costumes>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.costumes:1 of
msgid "Gets the costume manager"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`orientation <miniworlds.actors.actor.Actor.orientation>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`direction <miniworlds.actors.actor.Actor.direction>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.direction:1 of
msgid ""
"Directions are handled exactly as in the Scratch programming language, "
"see: `Scratch Wiki <https://en.scratch-"
"wiki.info/wiki/Direction_(value)>`_"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ""
":py:obj:`direction_at_unit_circle "
"<miniworlds.actors.actor.Actor.direction_at_unit_circle>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
#: miniworlds.actors.actor.Actor.direction_at_unit_circle:1 of
msgid ""
"Gets the direction as value in unit circle (0° right, 90° top, 180° "
"left...)"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`dirty <miniworlds.actors.actor.Actor.dirty>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.dirty:1 of
msgid "If actor is dirty, it will be repainted."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`size <miniworlds.actors.actor.Actor.size>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.size:1 of
msgid "Size of the actor"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`width <miniworlds.actors.actor.Actor.width>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.width:1 of
msgid "The width of the actor in pixels."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`height <miniworlds.actors.actor.Actor.height>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.height:1 of
msgid "The height of the actor in pixels."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`x <miniworlds.actors.actor.Actor.x>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.x:1 of
msgid "The x-value of a actor"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`y <miniworlds.actors.actor.Actor.y>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.y:1 of
msgid "The y-value of a actor"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`class_name <miniworlds.actors.actor.Actor.class_name>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`topleft_x <miniworlds.actors.actor.Actor.topleft_x>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.topleft_x:1
#: miniworlds.actors.actor.Actor.topleft_y:1 of
msgid "x-value of actor topleft-position"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`topleft_y <miniworlds.actors.actor.Actor.topleft_y>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`topleft <miniworlds.actors.actor.Actor.topleft>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`local_center <miniworlds.actors.actor.Actor.local_center>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.local_center:1
#: of
msgid "x-value of actor center-position inside the current camera-screen"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`center_x <miniworlds.actors.actor.Actor.center_x>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.center_x:1 of
msgid "x-value of actor center-position"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`center_y <miniworlds.actors.actor.Actor.center_y>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.center_y:1 of
msgid "y-value of actor center-position"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`center <miniworlds.actors.actor.Actor.center>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`is_rotatable <miniworlds.actors.actor.Actor.is_rotatable>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid "Defines if the costume of a actor should be rotatable."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`static <miniworlds.actors.actor.Actor.static>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.static:1 of
msgid ""
"Should actor react to events? You can turn this option off for additional"
" performance boost."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`fill_color <miniworlds.actors.actor.Actor.fill_color>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.color:1
#: miniworlds.actors.actor.Actor.fill_color:1 of
msgid "The fill color of actor as rgba value, e.g. (255, 0, 0) for red."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`color <miniworlds.actors.actor.Actor.color>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`is_filled <miniworlds.actors.actor.Actor.is_filled>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.is_filled:1 of
msgid "Is actor filled with color?"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`border_color <miniworlds.actors.actor.Actor.border_color>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.border_color:1
#: miniworlds.actors.actor.Actor.stroke_color:1 of
msgid "border color of actor."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`stroke_color <miniworlds.actors.actor.Actor.stroke_color>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`border <miniworlds.actors.actor.Actor.border>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.border:1 of
msgid "The border-size of actor."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`visible <miniworlds.actors.actor.Actor.visible>`\\"
msgstr ""

#: ../../None:4:<autosummary>:1 ../../None:52:<autosummary>:1
#: miniworlds.actors.actor.Actor.visible:1 of
msgid ""
"You can make this sprite disappear without removing it from the group "
"assign 0 for invisible and 1 for visible"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`rect <miniworlds.actors.actor.Actor.rect>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid "The surrounding Rectangle as pygame.Rect."
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`world <miniworlds.actors.actor.Actor.world>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`image <miniworlds.actors.actor.Actor.image>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.image:1 of
msgid "The image of the actor:"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ""
":py:obj:`position_manager "
"<miniworlds.actors.actor.Actor.position_manager>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`sensor_manager <miniworlds.actors.actor.Actor.sensor_manager>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ""
":py:obj:`costume_manager "
"<miniworlds.actors.actor.Actor.costume_manager>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`position <miniworlds.actors.actor.Actor.position>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1 miniworlds.actors.actor.Actor.position:1 of
msgid "The position of the actor as Position(x, y)"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ""
":py:obj:`is_display_initialized "
"<miniworlds.actors.actor.Actor.is_display_initialized>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`actor_id <miniworlds.actors.actor.Actor.actor_id>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`children <miniworlds.actors.actor.Actor.children>`\\"
msgstr ""

#: ../../None:52:<autosummary>:1
msgid ":py:obj:`speed <miniworlds.actors.actor.Actor.speed>`\\"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`visible "
"<miniworlds.actors.actor.pygame.sprite.DirtySprite.visible>`\\"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`layer "
"<miniworlds.actors.actor.pygame.sprite.DirtySprite.layer>`\\"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
"Layer property can only be set before the sprite is added to a group, "
"after that it is read only and a sprite's layer in a group should be set "
"via the group's change_layer() method."
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`image <miniworlds.actors.actor.pygame.sprite.Sprite.image>`\\"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`rect <miniworlds.actors.actor.pygame.sprite.Sprite.rect>`\\"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid ":py:obj:`layer <miniworlds.actors.actor.pygame.sprite.Sprite.layer>`\\"
msgstr ""

#: ../../None:5:<autosummary>:1
msgid "Dynamic, read only property for protected _layer attribute."
msgstr ""

#: ../../source/api/actor.md
msgid "Public Methods:"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`__init__ <miniworlds.actors.actor.Actor.__init__>`\\ "
"\\(\\[position\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`switch_origin <miniworlds.actors.actor.Actor.switch_origin>`\\ "
"\\(value\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`create_on_world "
"<miniworlds.actors.actor.Actor.create_on_world>`\\ \\(world\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.create_on_world:1 of
msgid "Creates a actor to a specific world"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`from_topleft <miniworlds.actors.actor.Actor.from_topleft>`\\ "
"\\(topleft\\_position\\, \\*args\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.from_center:1
#: miniworlds.actors.actor.Actor.from_topleft:1 of
msgid "Creates a actor with center at center_position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`from_center <miniworlds.actors.actor.Actor.from_center>`\\ "
"\\(center\\_position\\, \\*args\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`flip_x <miniworlds.actors.actor.Actor.flip_x>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Flips the actor by 180° degrees."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`add_costume <miniworlds.actors.actor.Actor.add_costume>`\\ "
"\\(\\[source\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Adds a new costume to actor."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`add_costumes <miniworlds.actors.actor.Actor.add_costumes>`\\ "
"\\(sources\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.add_costumes:1
#: of
msgid "Adds multiple costumes"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`remove_costume <miniworlds.actors.actor.Actor.remove_costume>`\\"
" \\(\\[source\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.remove_costume:1
#: of
msgid "Removes a costume from actor"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`switch_costume <miniworlds.actors.actor.Actor.switch_costume>`\\"
" \\(source\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.switch_costume:1
#: of
msgid "Switches the costume of actor"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`set_costume <miniworlds.actors.actor.Actor.set_costume>`\\ "
"\\(costume\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`reset_costumes <miniworlds.actors.actor.Actor.reset_costumes>`\\"
" \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`set_background_color "
"<miniworlds.actors.actor.Actor.set_background_color>`\\ \\(color\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`next_costume <miniworlds.actors.actor.Actor.next_costume>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.next_costume:1
#: of
msgid "Switches to the next costume of actor"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`has_costume <miniworlds.actors.actor.Actor.has_costume>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`turn_left <miniworlds.actors.actor.Actor.turn_left>`\\ "
"\\(\\[degrees\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.turn_left:1 of
msgid "Turns actor by *degrees* degrees left"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`turn_right <miniworlds.actors.actor.Actor.turn_right>`\\ "
"\\(\\[degrees\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.turn_right:1 of
msgid "Turns actor by *degrees* degrees right"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`set_direction <miniworlds.actors.actor.Actor.set_direction>`\\ "
"\\(direction\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.set_direction:1
#: of
msgid "Actor points in given direction."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`point_towards_position "
"<miniworlds.actors.actor.Actor.point_towards_position>`\\ "
"\\(destination\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.point_towards_position:1 of
msgid "Actor points towards a given position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`point_towards_actor "
"<miniworlds.actors.actor.Actor.point_towards_actor>`\\ \\(other\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.point_towards_actor:1 of
msgid "Actor points towards another actor."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`set_size <miniworlds.actors.actor.Actor.set_size>`\\ \\(value\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`scale_width <miniworlds.actors.actor.Actor.scale_width>`\\ "
"\\(value\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`scale_height <miniworlds.actors.actor.Actor.scale_height>`\\ "
"\\(value\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`move <miniworlds.actors.actor.Actor.move>`\\ \\(\\[distance\\, "
"direction\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.move:1 of
msgid "Moves actor *distance* steps in current direction"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`move_vector <miniworlds.actors.actor.Actor.move_vector>`\\ "
"\\(vector\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.move_vector:1 of
msgid "Moves actor in direction defined by the vector"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`move_back <miniworlds.actors.actor.Actor.move_back>`\\ "
"\\(distance\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`undo_move <miniworlds.actors.actor.Actor.undo_move>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Undo the last move."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`move_towards <miniworlds.actors.actor.Actor.move_towards>`\\ "
"\\(target\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`move_in_direction "
"<miniworlds.actors.actor.Actor.move_in_direction>`\\ \\(direction\\[\\, "
"distance\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.move_in_direction:1 of
msgid "Moves actor *distance* steps into a *direction* or towards a position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`move_to <miniworlds.actors.actor.Actor.move_to>`\\ \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.move_to:1 of
msgid "Moves actor *distance* to a specific world_posiition"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`remove <miniworlds.actors.actor.Actor.remove>`\\ \\(\\[kill\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.remove:1 of
msgid "Removes this actor from world"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`before_remove <miniworlds.actors.actor.Actor.before_remove>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`bounce_from_border "
"<miniworlds.actors.actor.Actor.bounce_from_border>`\\ \\(borders\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.bounce_from_border:1 of
msgid "The actor \"bounces\" from a border."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_all <miniworlds.actors.actor.Actor.detect_all>`\\ "
"\\(\\[actors\\, direction\\, distance\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Detects if actors are on actor position."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect <miniworlds.actors.actor.Actor.detect>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_borders <miniworlds.actors.actor.Actor.detect_borders>`\\"
" \\(\\[distance\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.detect_borders:1
#: of
msgid "Detects borders"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_left_border "
"<miniworlds.actors.actor.Actor.detect_left_border>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.detect_left_border:1 of
msgid "Does the actor touch the left border?"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_right_border "
"<miniworlds.actors.actor.Actor.detect_right_border>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.detect_right_border:1 of
msgid "Does the actor touch the right border?"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_top_border "
"<miniworlds.actors.actor.Actor.detect_top_border>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.detect_top_border:1
#: miniworlds.actors.actor.Actor.detecting_bottom_border:1 of
msgid "Does the actor touch the lower border?"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detecting_bottom_border "
"<miniworlds.actors.actor.Actor.detecting_bottom_border>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_color <miniworlds.actors.actor.Actor.detect_color>`\\ "
"\\(\\[color\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.detect_color:1
#: of
msgid "Detects colors in world-background at actor center-position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_color_at "
"<miniworlds.actors.actor.Actor.detect_color_at>`\\ \\(\\[direction\\, "
"distance\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.detect_color_at:1 of
msgid "Detects colors in world-background at actor-position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_actors_at "
"<miniworlds.actors.actor.Actor.detect_actors_at>`\\ \\(\\[direction\\, "
"distance\\, actors\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.detect_actors_at:1 of
msgid "Detects a actor in given direction and distance."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_actor_at "
"<miniworlds.actors.actor.Actor.detect_actor_at>`\\ \\(\\[direction\\, "
"distance\\, actors\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_actors_in_front "
"<miniworlds.actors.actor.Actor.detect_actors_in_front>`\\ \\(\\[actors\\,"
" distance\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_actor_in_front "
"<miniworlds.actors.actor.Actor.detect_actor_in_front>`\\ \\(\\[actors\\, "
"distance\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_point <miniworlds.actors.actor.Actor.detect_point>`\\ "
"\\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.detect_point:1
#: of
msgid "Is the actor colliding with a specific (global) point?"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_pixel <miniworlds.actors.actor.Actor.detect_pixel>`\\ "
"\\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.detect_pixel:1
#: of
msgid "Is the actor colliding with a pixel?"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`detect_rect <miniworlds.actors.actor.Actor.detect_rect>`\\ "
"\\(rect\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.detect_rect:1 of
msgid "Is the actor colliding with a static rect?"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`is_inside_world "
"<miniworlds.actors.actor.Actor.is_inside_world>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.is_inside_world:1 of
msgid "Is the actor colliding with current ...."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`bounce_from_actor "
"<miniworlds.actors.actor.Actor.bounce_from_actor>`\\ \\(other\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`animate <miniworlds.actors.actor.Actor.animate>`\\ "
"\\(\\[speed\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`animate_costume "
"<miniworlds.actors.actor.Actor.animate_costume>`\\ \\(costume\\[\\, "
"speed\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`animate_loop <miniworlds.actors.actor.Actor.animate_loop>`\\ "
"\\(\\[speed\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.animate_loop:1
#: of
msgid "Animates a costume with a looping animation"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`stop_animation <miniworlds.actors.actor.Actor.stop_animation>`\\"
" \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Stops current animation."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`send_message <miniworlds.actors.actor.Actor.send_message>`\\ "
"\\(message\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.send_message:1
#: of
msgid "Sends a message to world."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_key_down <miniworlds.actors.actor.Actor.on_key_down>`\\ "
"\\(key\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.on_key_down:1 of
msgid "**on_key_down**  is called one time when a key is pressed down."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_key_pressed <miniworlds.actors.actor.Actor.on_key_pressed>`\\"
" \\(key\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "**on_key_pressed** is called when while key is pressed."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`on_key_up <miniworlds.actors.actor.Actor.on_key_up>`\\ \\(key\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_over <miniworlds.actors.actor.Actor.on_mouse_over>`\\ "
"\\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.on_mouse_leave:1
#: miniworlds.actors.actor.Actor.on_mouse_over:1 of
msgid ""
"on_mouse_over is called, when mouse is moved over actor :type position: "
":param position: The mouse position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_leave <miniworlds.actors.actor.Actor.on_mouse_leave>`\\"
" \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_left <miniworlds.actors.actor.Actor.on_mouse_left>`\\ "
"\\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "on_mouse_left is called when left mouse button was pressed."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_right <miniworlds.actors.actor.Actor.on_mouse_right>`\\"
" \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Method is called when right mouse button was pressed."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_motion "
"<miniworlds.actors.actor.Actor.on_mouse_motion>`\\ \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Method is called when mouse moves."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_left_released "
"<miniworlds.actors.actor.Actor.on_mouse_left_released>`\\ \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.on_mouse_left_released:1 of
msgid "Method is called when left mouse key is released."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_mouse_right_released "
"<miniworlds.actors.actor.Actor.on_mouse_right_released>`\\ \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Method is called when right mouse key is released."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_clicked_left "
"<miniworlds.actors.actor.Actor.on_clicked_left>`\\ \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.on_clicked_left:1
#: miniworlds.actors.actor.Actor.on_clicked_right:1 of
msgid "The mouse is on top of a actor and mouse was clicked."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_clicked_right "
"<miniworlds.actors.actor.Actor.on_clicked_right>`\\ \\(position\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_detecting_world "
"<miniworlds.actors.actor.Actor.on_detecting_world>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.on_detecting_world:1
#: miniworlds.actors.actor.Actor.on_not_detecting_world:1 of
msgid "`on_detecting_world` is called, when actor is on the world"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_not_detecting_world "
"<miniworlds.actors.actor.Actor.on_not_detecting_world>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_detecting_actor "
"<miniworlds.actors.actor.Actor.on_detecting_actor>`\\ \\(actor\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.on_detecting_actor:1 of
msgid ""
"*on_detecting_actor* is called, when actor is detects a actor on same "
"position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_detecting_borders "
"<miniworlds.actors.actor.Actor.on_detecting_borders>`\\ \\(borders\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.on_detecting_borders:1 of
msgid "*on_detecting_border* is called, when actor is near a border"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`fill <miniworlds.actors.actor.Actor.fill>`\\ \\(value\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.fill:1 of
msgid "Set fill color for borders and lines"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`hide <miniworlds.actors.actor.Actor.hide>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.hide:1 of
msgid "Hides a actor (the actor will be invisible)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`show <miniworlds.actors.actor.Actor.show>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1 miniworlds.actors.actor.Actor.show:1 of
msgid "Displays a actor ( an invisible actor will be visible)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`register <miniworlds.actors.actor.Actor.register>`\\ "
"\\(method\\[\\, force\\, name\\]\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "This method is used for the @register decorator."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`register_message "
"<miniworlds.actors.actor.Actor.register_message>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.register_message:1 of
msgid "Registers a method to an object to handle specific `on_message` events."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`register_sensor "
"<miniworlds.actors.actor.Actor.register_sensor>`\\ \\(\\*args\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.register_sensor:1 of
msgid "This method is used for the @register_sensor decorator."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`get_local_rect <miniworlds.actors.actor.Actor.get_local_rect>`\\"
" \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`__str__ <miniworlds.actors.actor.Actor.__str__>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid "Return str(self)."
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`set_world <miniworlds.actors.actor.Actor.set_world>`\\ "
"\\(new\\_world\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ":py:obj:`new_costume <miniworlds.actors.actor.Actor.new_costume>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`get_costume_class "
"<miniworlds.actors.actor.Actor.get_costume_class>`\\ \\(\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`set_position <miniworlds.actors.actor.Actor.set_position>`\\ "
"\\(value\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`get_distance_to "
"<miniworlds.actors.actor.Actor.get_distance_to>`\\ \\(obj\\)"
msgstr ""

#: ../../None:88:<autosummary>:1
#: miniworlds.actors.actor.Actor.get_distance_to:1 of
msgid "Gets the distance to another actor or a position"
msgstr ""

#: ../../None:88:<autosummary>:1
msgid ""
":py:obj:`on_shape_change "
"<miniworlds.actors.actor.Actor.on_shape_change>`\\ \\(\\)"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<miniworlds.actors.actor.pygame.sprite.DirtySprite.__init__>`\\ "
"\\(\\*groups\\)"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`__repr__ "
"<miniworlds.actors.actor.pygame.sprite.DirtySprite.__repr__>`\\ \\(\\)"
msgstr ""

#: ../../None:12:<autosummary>:1 ../../None:4:<autosummary>:1
msgid "Return repr(self)."
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<miniworlds.actors.actor.pygame.sprite.Sprite.__init__>`\\ "
"\\(\\*groups\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`add <miniworlds.actors.actor.pygame.sprite.Sprite.add>`\\ "
"\\(\\*groups\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "add the sprite to groups"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`remove <miniworlds.actors.actor.pygame.sprite.Sprite.remove>`\\ "
"\\(\\*groups\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "remove the sprite from groups"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`add_internal "
"<miniworlds.actors.actor.pygame.sprite.Sprite.add_internal>`\\ "
"\\(group\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "For adding this sprite to a group internally."
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`remove_internal "
"<miniworlds.actors.actor.pygame.sprite.Sprite.remove_internal>`\\ "
"\\(group\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "For removing this sprite from a group internally."
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`update <miniworlds.actors.actor.pygame.sprite.Sprite.update>`\\ "
"\\(\\*args\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "method to control sprite behavior"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`kill <miniworlds.actors.actor.pygame.sprite.Sprite.kill>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "remove the Sprite from all Groups"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`groups <miniworlds.actors.actor.pygame.sprite.Sprite.groups>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "list of Groups that contain this Sprite"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`alive <miniworlds.actors.actor.pygame.sprite.Sprite.alive>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid "does the sprite belong to any groups"
msgstr ""

#: ../../None:12:<autosummary>:1
msgid ""
":py:obj:`__repr__ "
"<miniworlds.actors.actor.pygame.sprite.Sprite.__repr__>`\\ \\(\\)"
msgstr ""

#: ../../source/api/actor.md
msgid "Private Data Attributes:"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ":py:obj:`_world <miniworlds.actors.actor.Actor._world>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ""
":py:obj:`_sensor_manager "
"<miniworlds.actors.actor.Actor._sensor_manager>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ""
":py:obj:`_position_manager "
"<miniworlds.actors.actor.Actor._position_manager>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ""
":py:obj:`_costume_manager "
"<miniworlds.actors.actor.Actor._costume_manager>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ""
":py:obj:`_collision_type "
"<miniworlds.actors.actor.Actor._collision_type>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ":py:obj:`_layer <miniworlds.actors.actor.Actor._layer>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ":py:obj:`_is_acting <miniworlds.actors.actor.Actor._is_acting>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ":py:obj:`__image <miniworlds.actors.actor.Actor.__image>`\\"
msgstr ""

#: ../../None:11:<autosummary>:1
msgid ":py:obj:`__rect <miniworlds.actors.actor.Actor.__rect>`\\"
msgstr ""

#: ../../source/api/actor.md
msgid "Private Methods:"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`_validate_arguments "
"<miniworlds.actors.actor.Actor._validate_arguments>`\\ \\(position\\, "
"\\*args\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`_is_actor_repainted "
"<miniworlds.actors.actor.Actor._is_actor_repainted>`\\ \\(\\)"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`_set_visible "
"<miniworlds.actors.actor.pygame.sprite.DirtySprite._set_visible>`\\ "
"\\(val\\)"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid "set the visible value (0 or 1) and makes the sprite dirty"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid ""
":py:obj:`_get_visible "
"<miniworlds.actors.actor.pygame.sprite.DirtySprite._get_visible>`\\ "
"\\(\\)"
msgstr ""

#: ../../None:4:<autosummary>:1
msgid "return the visible value of that sprite"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:1 of
msgid ""
"Adds a new costume to actor. The costume can be switched with "
"self.switch_costume(index)"
msgstr ""

#: ../../source/api/actor.md
msgid "Return type"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:4
#: miniworlds.actors.actor.Actor.add_costumes:4
#: miniworlds.actors.actor.Actor.switch_costume:3 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~miniworlds.appearances.costume.Costume\\``"
msgstr ""

#: ../../source/api/actor.md
msgid "Parameters"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:6 of
msgid "Path to the first image of new costume or Tuple with color-value"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:10 of
msgid "Add first costume from image:"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:23
#: miniworlds.actors.actor.Actor.add_costume:41
#: miniworlds.actors.actor.Actor.add_costume:68
#: miniworlds.actors.actor.Actor.border:35
#: miniworlds.actors.actor.Actor.bounce_from_border:32
#: miniworlds.actors.actor.Actor.color:51
#: miniworlds.actors.actor.Actor.detect:39
#: miniworlds.actors.actor.Actor.fill_color:51
#: miniworlds.actors.actor.Actor.flip_x:33
#: miniworlds.actors.actor.Actor.is_flipped:31
#: miniworlds.actors.actor.Actor.is_rotatable:37
#: miniworlds.actors.actor.Actor.on_mouse_left_released:29
#: miniworlds.actors.actor.Actor.turn_left:25
#: miniworlds.actors.actor.Actor.turn_right:22 of
msgid "Output:"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:25
#: miniworlds.actors.actor.Actor.add_costume:43 of
msgid "Create Actor with image as costume"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:29 of
msgid "Add first costume from color:"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:48 of
msgid "Create two costumes and switch between costumes"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:70 of
msgid "Create multiple costumes and switch between costumes"
msgstr ""

#: ../../source/api/actor.md
msgid "Returns"
msgstr ""

#: miniworlds.actors.actor.Actor.add_costume:74 of
msgid "The new costume."
msgstr ""

#: miniworlds.actors.actor.Actor.animate_loop:3 of
msgid "Switches through all costume-images every ``speed``-frame."
msgstr ""

#: miniworlds.actors.actor.Actor.animate_loop:18 of
msgid "Every ``speed`` frame, the image is switched. Defaults to 10."
msgstr ""

#: miniworlds.actors.actor.Actor.border:3 of
msgid "The value is 0, if actor has no border."
msgstr ""

#: miniworlds.actors.actor.Actor.border:7 of
msgid ""
"You can also set border with ``costume.border`` or you can set the border"
" with ``world.default_border``"
msgstr ""

#: miniworlds.actors.actor.Actor.border:11 of
msgid "Set border of actor:"
msgstr ""

#: miniworlds.actors.actor.Actor.border:37
#: miniworlds.actors.actor.Actor.color:53
#: miniworlds.actors.actor.Actor.fill_color:53 of
msgid "Set borders"
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:3
#: miniworlds.actors.actor.Actor.stroke_color:3 of
msgid ""
"The border-color is a rgba value, for example (255, 0, 0) for red, (0, "
"255, 0) for green and (255, 0, 0, 100)."
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:5
#: miniworlds.actors.actor.Actor.stroke_color:5 of
msgid "If the color-value has 4 values, the last value defines the transparency:"
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:6
#: miniworlds.actors.actor.Actor.stroke_color:6 of
msgid "0: Full transparent,"
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:7
#: miniworlds.actors.actor.Actor.stroke_color:7 of
msgid "255: No transparency"
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:12
#: miniworlds.actors.actor.Actor.stroke_color:12 of
msgid "You must also set :py:attr:`Actor.border` to a value > 0"
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:14
#: miniworlds.actors.actor.Actor.stroke_color:14 of
msgid "Aliases:  :py:attr:`Actor.stroke_color`"
msgstr ""

#: miniworlds.actors.actor.Actor.border_color:18
#: miniworlds.actors.actor.Actor.stroke_color:18 of
msgid "See :py:attr:`Actor.border`"
msgstr ""

#: miniworlds.actors.actor.Actor.bounce_from_border:3 of
msgid ""
"The direction is set according to the principle input angle = output "
"angle."
msgstr ""

#: miniworlds.actors.actor.Actor.bounce_from_border:7 of
msgid "You must check for borders first!"
msgstr ""

#: miniworlds.actors.actor.Actor.bounce_from_border:9 of
msgid "A list of borders as strings e.g. [\"left\", \"right\"]"
msgstr ""

#: miniworlds.actors.actor.Actor.bounce_from_border:41 of
msgid "The actor"
msgstr ""

#: miniworlds.actors.actor.Actor.bounce_from_border:43
#: miniworlds.actors.actor.Actor.detect_actor_at:2
#: miniworlds.actors.actor.Actor.detect_actor_in_front:2
#: miniworlds.actors.actor.Actor.set_world:2 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~miniworlds.actors.actor.Actor\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.collision_type:3 of
msgid "`default`: tile for Tiledworlds, 'mask' for Pixelworlds"
msgstr ""

#: miniworlds.actors.actor.Actor.collision_type:5 of
msgid "`tile`: Are actors on the same tile? (only TiledWorld)"
msgstr ""

#: miniworlds.actors.actor.Actor.collision_type:7 of
msgid ""
"`rect`: Are actors colliding when checking their bounding - boxes? (Only "
"PixelWorld)"
msgstr ""

#: miniworlds.actors.actor.Actor.collision_type:9 of
msgid ""
"`static-rect`: Are actors colliding when checking circle with radius = "
"bounding-box-radius.(Only PixelWorld)"
msgstr ""

#: miniworlds.actors.actor.Actor.collision_type:11 of
msgid ""
"`circle`: Are actors colliding when checking circle with radius = "
"bounding-box-radius.(Only PixelWorld)"
msgstr ""

#: miniworlds.actors.actor.Actor.collision_type:13 of
msgid ""
"`mask`: Are actors colliding when checking if their image masks are "
"overlapping."
msgstr ""

#: miniworlds.actors.actor.Actor.color:3
#: miniworlds.actors.actor.Actor.fill_color:3 of
msgid ""
"When ``fill_color`` is set to a color, the attribute ``is_filled`` of "
"costume (See: :py:attr:`.appearances.appearance.Appearance.is_filled`) is"
" set to ``True``."
msgstr ""

#: miniworlds.actors.actor.Actor.color:8
#: miniworlds.actors.actor.Actor.fill_color:8 of
msgid "Aliases: :py:attr:`Actor.color`"
msgstr ""

#: miniworlds.actors.actor.Actor.color:12
#: miniworlds.actors.actor.Actor.fill_color:12 of
msgid ""
"If you fill a costume with an image, the image will be completely "
"overwritten, even if `fill_color` is transparent."
msgstr ""

#: miniworlds.actors.actor.Actor.color:15
#: miniworlds.actors.actor.Actor.fill_color:15 of
msgid "This behaviour may change in later releases!"
msgstr ""

#: miniworlds.actors.actor.Actor.color:17
#: miniworlds.actors.actor.Actor.fill_color:17 of
msgid "Examples:"
msgstr ""

#: miniworlds.actors.actor.Actor.costume_count:5 of
msgid "Add costume and count costumes"
msgstr ""

#: miniworlds.actors.actor.Actor.costume_count:17 of
msgid "_description_"
msgstr ""

#: miniworlds.actors.actor.Actor.costumes:3 of
msgid "The costume manager can be iterated to get all costumes"
msgstr ""

#: miniworlds.actors.actor.Actor.create_on_world:3 of
msgid "overwritten in subclasses"
msgstr ""

#: miniworlds.actors.actor.Actor.detect:1 of
msgid "Detects if actors are on actor position. Returns the first found actor."
msgstr ""

#: miniworlds.actors.actor.Actor.detect:4 of
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Optional\\`\\\\"
" \\\\\\[\\:py\\:class\\:\\`\\~miniworlds.actors.actor.Actor\\`\\]`"
msgstr ""

#: miniworlds.actors.actor.Actor.detect:6 of
msgid ""
"filter by actor type. Enter a class_name of actors to look for "
"heredirection: int = 0, distance: int = 0"
msgstr ""

#: miniworlds.actors.actor.Actor.detect:7
#: miniworlds.actors.actor.Actor.detect_actors_at:24
#: miniworlds.actors.actor.Actor.detect_all:7 of
msgid "The direction in which actors should be detected."
msgstr ""

#: miniworlds.actors.actor.Actor.detect:8
#: miniworlds.actors.actor.Actor.detect_actors_at:26
#: miniworlds.actors.actor.Actor.detect_all:8 of
msgid ""
"The distance in which actors should be detected (Start-Point is "
"actor.center)"
msgstr ""

#: miniworlds.actors.actor.Actor.detect:10 of
msgid "First actor found by Sensor"
msgstr ""

#: miniworlds.actors.actor.Actor.detect:14 of
msgid "The green robot pushes the yellow robot:"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_actors_at:27
#: miniworlds.actors.actor.Actor.detect_actors_in_front:2 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`list\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_actors_at:28 of
msgid "A list of actors"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_all:1 of
msgid "Detects if actors are on actor position. Returns a list of actors."
msgstr ""

#: miniworlds.actors.actor.Actor.detect_all:4 of
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.List\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`\\~miniworlds.actors.actor.Actor\\`\\]`"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_all:6 of
msgid "filter by actor type. Enter a class_name of actors to look for here"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_all:10 of
msgid "All actors found by Sensor"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_borders:3
#: miniworlds.actors.actor.Actor.detect_color_at:6 of
msgid ""
"Specifies the distance in front of the actuator to which the sensors "
"reacts."
msgstr ""

#: miniworlds.actors.actor.Actor.detect_borders:5
#: miniworlds.actors.actor.Actor.detect_left_border:5
#: miniworlds.actors.actor.Actor.detect_right_border:5
#: miniworlds.actors.actor.Actor.detect_top_border:5
#: miniworlds.actors.actor.Actor.detecting_bottom_border:5 of
msgid "True if border was found."
msgstr ""

#: miniworlds.actors.actor.Actor.detect_borders:7 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.List\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_color:3
#: miniworlds.actors.actor.Actor.detect_left_border:3
#: miniworlds.actors.actor.Actor.detect_pixel:3
#: miniworlds.actors.actor.Actor.detect_point:3
#: miniworlds.actors.actor.Actor.detect_right_border:3
#: miniworlds.actors.actor.Actor.detect_top_border:3
#: miniworlds.actors.actor.Actor.detecting_bottom_border:3
#: miniworlds.actors.actor.Actor.has_costume:2 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_color:5 of
msgid "color as tuple"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_color:7 of
msgid "True, if color was found"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_color_at:3 of
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:data\\:\\`\\~typing.Tuple\\`\\, "
"\\:py\\:class\\:\\`\\~typing.List\\`\\]`"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_color_at:5 of
msgid "Specifies the direction where the sensors is searching."
msgstr ""

#: miniworlds.actors.actor.Actor.detect_color_at:8 of
msgid "All colors found by Sensor"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_pixel:5 of
msgid "True if pixel is below actor"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_point:5 of
msgid ""
"If your want to check if an actor detects a specific pixel, use "
"detect_pixel"
msgstr ""

#: miniworlds.actors.actor.Actor.detect_point:7 of
msgid "True if point is below actor"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:4 of
msgid "The default direction is ``0°``. All actors are looking ``\"up\"``"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:6 of
msgid "Move on world"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:10 of
msgid "**Values for Direction**"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:12 of
msgid "``0°`` or ``\"up\"``: up"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:13 of
msgid "``90°`` or ``\"right\"``: Move right"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:14 of
msgid "``-90°`` or ``\"left\"``: Move left"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:15 of
msgid "``180°`` or ``\"down\"``: Move down"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:16 of
msgid "``\"forward\"``: Current direction"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:18 of
msgid "Sets direction of the actor."
msgstr ""

#: miniworlds.actors.actor.Actor.direction:20 of
msgid "You can use an integer or a string to describe the direction"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:22
#: miniworlds.actors.actor.Actor.move_in_direction:5
#: miniworlds.actors.actor.Actor.set_direction:10 of
msgid "Options"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:23
#: miniworlds.actors.actor.Actor.set_direction:11 of
msgid "``0``, ``\"up\"`` - Look up"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:24
#: miniworlds.actors.actor.Actor.set_direction:12 of
msgid "``90``, ``\"right\"``, - Look right"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:25
#: miniworlds.actors.actor.Actor.set_direction:13 of
msgid "``-90``, ``\"left\"``, - Look left"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:26
#: miniworlds.actors.actor.Actor.set_direction:14 of
msgid "``-180``, ``180``, ``\"down\"`` - Look down"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:32
#: miniworlds.actors.actor.Actor.set_direction:20 of
msgid "Move in a direction with WASD-Keys"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:47 of
msgid "Move 45°:"
msgstr ""

#: miniworlds.actors.actor.Actor.direction:71 of
msgid "Move -45°:"
msgstr ""

#: miniworlds.actors.actor.Actor.dirty:3 of
msgid "1 if actor is dirty/0 otherwise"
msgstr ""

#: miniworlds.actors.actor.Actor.flip_x:1 of
msgid ""
"Flips the actor by 180° degrees. The costume is flipped and the actor's "
"direction changed by 180 degrees."
msgstr ""

#: miniworlds.actors.actor.Actor.flip_x:7 of
msgid "Flip a actor in Example flipthefish.py"
msgstr ""

#: miniworlds.actors.actor.Actor.flip_x:42
#: miniworlds.actors.actor.Actor.point_towards_actor:3
#: miniworlds.actors.actor.Actor.turn_left:38 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`int\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.from_center:3
#: miniworlds.actors.actor.Actor.from_topleft:3 of
msgid "Arg`s:"
msgstr ""

#: miniworlds.actors.actor.Actor.from_center:4
#: miniworlds.actors.actor.Actor.from_topleft:4 of
msgid "center_position: Center of actor"
msgstr ""

#: miniworlds.actors.actor.Actor.get_costume_class:2 of
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`type\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`\\~miniworlds.appearances.costume.Costume\\`\\]`"
msgstr ""

#: miniworlds.actors.actor.Actor.get_distance_to:3
#: miniworlds.actors.actor.Actor.set_direction:5 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`float\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.get_distance_to:5 of
msgid "Actor or Position"
msgstr ""

#: miniworlds.actors.actor.Actor.get_distance_to:7 of
msgid ""
"The distance between actor (measured from actor.center) to actor or "
"position."
msgstr ""

#: miniworlds.actors.actor.Actor.get_local_rect:2 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~pygame.rect.Rect\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.height:3 of
msgid "When the height of a actor is changed, the width is scaled proportionally."
msgstr ""

#: miniworlds.actors.actor.Actor.height:7 miniworlds.actors.actor.Actor.width:7
#: of
msgid "Create a actor and scale width/height proportionally:"
msgstr ""

#: miniworlds.actors.actor.Actor.height:30
#: miniworlds.actors.actor.Actor.width:30 of
msgid "Textured image"
msgstr ""

#: miniworlds.actors.actor.Actor.image:5 of
msgid ""
"Warning: You should not directly draw on the image (with pygame "
"functions) as the image will be reloaded during animations"
msgstr ""

#: miniworlds.actors.actor.Actor.is_flipped:1 of
msgid ""
"When a actor is mirrored, it is mirrored across the y-axis. You can use "
"this property in 2D platformer games to change the direction of actor."
msgstr ""

#: miniworlds.actors.actor.Actor.is_flipped:6 of
msgid "It may be necessary to set ``is_rotatable = True``"
msgstr ""

#: miniworlds.actors.actor.Actor.is_flipped:10 of
msgid "Flip a costume after 100 frames."
msgstr ""

#: miniworlds.actors.actor.Actor.is_flipped:44 of
msgid "True, if actor is flipped"
msgstr ""

#: miniworlds.actors.actor.Actor.is_rotatable:1 of
msgid ""
"Defines if the costume of a actor should be rotatable. The actor can "
"still be rotated with the ``direction`` property, but its costume won't "
"be changed"
msgstr ""

#: miniworlds.actors.actor.Actor.is_rotatable:6 of
msgid "You can also use ``actor.costume.is_rotatable``"
msgstr ""

#: miniworlds.actors.actor.Actor.is_rotatable:10 of
msgid "Create a rotatable and a not rotatable actor"
msgstr ""

#: miniworlds.actors.actor.Actor.last_position:3 of
msgid "Can be used to track changes."
msgstr ""

#: miniworlds.actors.actor.Actor.move:5 of
msgid "Number of steps to move. If distance = 0, the actor speed will be used."
msgstr ""

#: miniworlds.actors.actor.Actor.move:8
#: miniworlds.actors.actor.Actor.move_vector:3
#: miniworlds.actors.actor.Actor.undo_move:5 of
msgid "The moved actor"
msgstr ""

#: miniworlds.actors.actor.Actor.move:12 of
msgid "if actor is on the world, move forward:"
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:6 of
msgid "0, \"up\" - Look up"
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:7 of
msgid "90, \"right\", - Look right"
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:8 of
msgid "-90, \"left\", - Look left"
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:9 of
msgid "-180, 180, \"down\" - Look down"
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:13 of
msgid "Direction as angle"
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:14 of
msgid "Detects obj \"distance\" steps in front of current actor."
msgstr ""

#: miniworlds.actors.actor.Actor.move_in_direction:16
#: miniworlds.actors.actor.Actor.move_to:8 of
msgid "The actor itself"
msgstr ""

#: miniworlds.actors.actor.Actor.move_to:3 of
msgid ""
"The position to which the actor should move. The position can be a "
"2-tuple (x, y)"
msgstr ""

#: miniworlds.actors.actor.Actor.move_to:12 of
msgid "move to (3, 2) on mouse_click"
msgstr ""

#: miniworlds.actors.actor.Actor.next_costume:3
#: miniworlds.actors.actor.Actor.switch_costume:27 of
msgid "The new costume"
msgstr ""

#: miniworlds.actors.actor.Actor.on_clicked_left:5
#: miniworlds.actors.actor.Actor.on_clicked_right:5 of
msgid "Registering a on_click event:"
msgstr ""

#: miniworlds.actors.actor.Actor.on_clicked_left:15
#: miniworlds.actors.actor.Actor.on_clicked_right:15
#: miniworlds.actors.actor.Actor.on_mouse_left:30
#: miniworlds.actors.actor.Actor.on_mouse_left_released:38
#: miniworlds.actors.actor.Actor.on_mouse_motion:29
#: miniworlds.actors.actor.Actor.on_mouse_right:15
#: miniworlds.actors.actor.Actor.on_mouse_right_released:4 of
msgid "Actual mouse position as tuple (x,y)"
msgstr ""

#: ../../source/api/actor.md
msgid "Raises"
msgstr ""

#: miniworlds.actors.actor.Actor.on_clicked_left:18
#: miniworlds.actors.actor.Actor.on_clicked_right:18
#: miniworlds.actors.actor.Actor.on_detecting_actor:18
#: miniworlds.actors.actor.Actor.on_detecting_borders:17
#: miniworlds.actors.actor.Actor.on_detecting_world:13
#: miniworlds.actors.actor.Actor.on_key_down:34
#: miniworlds.actors.actor.Actor.on_key_pressed:30
#: miniworlds.actors.actor.Actor.on_mouse_left:33
#: miniworlds.actors.actor.Actor.on_mouse_left_released:41
#: miniworlds.actors.actor.Actor.on_mouse_motion:32
#: miniworlds.actors.actor.Actor.on_mouse_right:18
#: miniworlds.actors.actor.Actor.on_mouse_right_released:7
#: miniworlds.actors.actor.Actor.on_not_detecting_world:13 of
msgid "The error is raised when method is not overwritten or registered."
msgstr ""

#: miniworlds.actors.actor.Actor.on_detecting_actor:3 of
msgid "The found actor"
msgstr ""

#: miniworlds.actors.actor.Actor.on_detecting_actor:8 of
msgid "Register detect_actor event"
msgstr ""

#: miniworlds.actors.actor.Actor.on_detecting_borders:3 of
msgid "A list of strings with found borders, e.g.: ['left', 'top']"
msgstr ""

#: miniworlds.actors.actor.Actor.on_detecting_borders:8 of
msgid "Register on_detecting_border_event:"
msgstr ""

#: miniworlds.actors.actor.Actor.on_detecting_world:5
#: miniworlds.actors.actor.Actor.on_not_detecting_world:5 of
msgid "Register on_detecting_world method:"
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_down:4 of
msgid ""
"Instead of **on_key_down** you can use **on_key_down_letter**, e.g. "
"**on_key_down_a** or **on_key_down_w** , if you want to handle an "
"on_key_down event for a specific letter."
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_down:9 of
msgid "Register a key_down event:"
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_down:20 of
msgid "Register on_key_down_a event"
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_down:31 of
msgid ""
"The typed key as list (e.g. ['A', 'a']) containing both uppercase and "
"lowercase of typed letter."
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_pressed:1 of
msgid ""
"**on_key_pressed** is called when while key is pressed. If you hold the "
"key, on_key_pressed is repeatedly called again and again until the key is"
" released."
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_pressed:6 of
msgid ""
"Like `on_key_down` the method can be called in the variant "
"`on_key_pressed_[letter]` (e.g. `on_key_pressed_w(self)`)."
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_pressed:11 of
msgid "Register on_key_pressed event:"
msgstr ""

#: miniworlds.actors.actor.Actor.on_key_pressed:26 of
msgid ""
"The typed key as list (e.g. ['C', 'c', 'D', 'd']) containing both "
"uppercase and lowercase"
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_left:1 of
msgid ""
"on_mouse_left is called when left mouse button was pressed. You must "
"*register* or *implement* this method as an event."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_left:6 of
msgid ""
"The event is triggered, when mouse-left was clicked, even when the "
"current mouse position is not related to actor position."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_left:9
#: miniworlds.actors.actor.Actor.on_mouse_motion:8
#: miniworlds.actors.actor.Actor.on_mouse_right:9 of
msgid ""
"You can use :py:meth:`Actor.detect_pixel` to check, if the mouse_position"
" is *inside* the actor."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_left:13
#: miniworlds.actors.actor.Actor.on_mouse_motion:12 of
msgid "A circle will be moved, if you click on circle."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_left_released:5 of
msgid "You can use on_mouse_left_release to implement a drag_and_drop event"
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_motion:1 of
msgid ""
"Method is called when mouse moves. You must *register* or *implement* "
"this method as an event."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_motion:5 of
msgid ""
"The event is triggered, when mouse is moved, even when the current mouse "
"position is not related to actor position."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_right:1 of
msgid ""
"Method is called when right mouse button was pressed. You must *register*"
" or *implement* this method as an event."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_right:6 of
msgid ""
"The event is triggered, when mouse was clicked,even when the current "
"mouse position is not related to actor position."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_right:13 of
msgid "See: :py:meth:`Actor.on_mouse_left`."
msgstr ""

#: miniworlds.actors.actor.Actor.on_mouse_right_released:1 of
msgid ""
"Method is called when right mouse key is released. See "
":py:meth:`Actor.on_mouse_left_released`."
msgstr ""

#: miniworlds.actors.actor.Actor.point_towards_actor:5 of
msgid "The other actor"
msgstr ""

#: miniworlds.actors.actor.Actor.point_towards_actor:7
#: miniworlds.actors.actor.Actor.point_towards_position:7 of
msgid "The new direction"
msgstr ""

#: miniworlds.actors.actor.Actor.point_towards_position:3 of
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`int\\`\\, \\:py\\:class\\:\\`float\\`\\]`"
msgstr ""

#: miniworlds.actors.actor.Actor.point_towards_position:5 of
msgid "The position to which the actor should pointing"
msgstr ""

#: miniworlds.actors.actor.Actor.point_towards_position:11 of
msgid "Point towards mouse_position:"
msgstr ""

#: miniworlds.actors.actor.Actor.rect:1 of
msgid ""
"The surrounding Rectangle as pygame.Rect. The rect coordinates describes "
"the local coordinates and depend on the camera view."
msgstr ""

#: miniworlds.actors.actor.Actor.rect:3 of
msgid ""
"If the actor is rotated, the rect vertices are not the vertices of the "
"actor image."
msgstr ""

#: miniworlds.actors.actor.Actor.register:1 of
msgid ""
"This method is used for the @register decorator. It adds a method to an "
"object"
msgstr ""

#: miniworlds.actors.actor.Actor.register:3 of
msgid "The method which should be added to the actor"
msgstr ""

#: miniworlds.actors.actor.Actor.register:5 of
msgid "Should register forced, even if method is not handling a valid event?"
msgstr ""

#: miniworlds.actors.actor.Actor.register:6 of
msgid "Registers method with specific name"
msgstr ""

#: miniworlds.actors.actor.Actor.register_message:3 of
msgid ""
"This decorator links a method to a specific event message, triggering it "
"automatically when the designated message is received."
msgstr ""

#: miniworlds.actors.actor.Actor.register_message:8 of
msgid "Example of two actors who are communicating."
msgstr ""

#: miniworlds.actors.actor.Actor.register_message:24 of
msgid "The specific message event this method will react to."
msgstr ""

#: miniworlds.actors.actor.Actor.remove:5 of
msgid "Removes robots in thecrash.py :"
msgstr ""

#: miniworlds.actors.actor.Actor.remove:17 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~collections.defaultdict\\``"
msgstr ""

#: miniworlds.actors.actor.Actor.remove_costume:3 of
msgid "The index of the new costume or costume-object. Defaults to actual costume"
msgstr ""

#: miniworlds.actors.actor.Actor.send_message:3 of
msgid "The message can be received with the ``on_message``-event"
msgstr ""

#: miniworlds.actors.actor.Actor.send_message:7 of
msgid "Send and receive messages:"
msgstr ""

#: miniworlds.actors.actor.Actor.send_message:30 of
msgid "A string containing the message."
msgstr ""

#: miniworlds.actors.actor.Actor.set_direction:3 of
msgid "You can use a integer or a string to describe the direction"
msgstr ""

#: miniworlds.actors.actor.Actor.stop_animation:1 of
msgid "Stops current animation. Costume ``is_animated`` is set to False"
msgstr ""

#: miniworlds.actors.actor.Actor.switch_costume:5 of
msgid "Number of costume or Costume object"
msgstr ""

#: miniworlds.actors.actor.Actor.switch_costume:9 of
msgid "Switch a costume:"
msgstr ""

#: miniworlds.actors.actor.Actor.turn_left:5
#: miniworlds.actors.actor.Actor.turn_right:31 of
msgid "Options:"
msgstr ""

#: miniworlds.actors.actor.Actor.turn_left:6
#: miniworlds.actors.actor.Actor.turn_right:32 of
msgid ""
"You can set the value actor.is_rotatable = False if you don't want the "
"actor to be rotated."
msgstr ""

#: miniworlds.actors.actor.Actor.turn_left:34
#: miniworlds.actors.actor.Actor.turn_right:34 of
msgid "degrees in left direction"
msgstr ""

#: miniworlds.actors.actor.Actor.turn_left:36
#: miniworlds.actors.actor.Actor.turn_right:36 of
msgid "New direction"
msgstr ""

#: miniworlds.actors.actor.Actor.undo_move:1 of
msgid ""
"Undo the last move. Moves the actor to the last position and resets "
"direction."
msgstr ""

#: miniworlds.actors.actor.Actor.undo_move:9 of
msgid "move_back when field is blocked:"
msgstr ""

#: miniworlds.actors.actor.Actor.width:3 of
msgid "When the width of a actor is changed, the height is scaled proportionally."
msgstr ""

#~ msgid "Gets the costume of actor"
#~ msgstr ""

#~ msgid ""
#~ "Turns actor by *degrees* degrees left"
#~ " :rtype: "
#~ ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`int\\``"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`move <miniworlds.actors.actor.Actor.move>`\\ "
#~ "\\(\\[distance\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`detect_world "
#~ "<miniworlds.actors.actor.Actor.detect_world>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "*on_detect_actor* is called, when actor "
#~ "is detects a actor on same "
#~ "position"
#~ msgstr ""

#~ msgid ""
#~ "The direction is set according to "
#~ "the principle input angle = output "
#~ "angle. :rtype: "
#~ ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~miniworlds.actors.actor.Actor\\``"
#~ msgstr ""

#~ msgid ""
#~ "Args: :rtype: "
#~ ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.List\\``"
#~ msgstr ""

#~ msgid ""
#~ "distance: Specifies the distance in "
#~ "front of the actuator to which the"
#~ " sensors reacts."
#~ msgstr ""

#~ msgid ""
#~ "Flips the actor by 180° degrees. "
#~ "The costume is flipped and the "
#~ "actor's direction changed by 180 "
#~ "degrees. :rtype: "
#~ ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`int\\``"
#~ msgstr ""

#~ msgid ""
#~ "Examples: :rtype: "
#~ ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~collections.defaultdict\\``"
#~ msgstr ""

#~ msgid "Rückgabetyp"
#~ msgstr ""

#~ msgid "Parameter"
#~ msgstr ""

#~ msgid "Rückgabe"
#~ msgstr ""

#~ msgid "Verursacht"
#~ msgstr ""

