# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-07 17:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: gpt-po v1.1.1\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/processing/04_variables.md:1
#, fuzzy
msgid "Values and Variables"
msgstr "Values and variables"

#: ../../source/processing/04_variables.md:3
msgid ""
"A **value** is something that can be stored in a computer and manipulated"
" by a computer program. In this tutorial, values are referred to as "
"**objects**, and the terms are used interchangeably."
msgstr ""

#: ../../source/processing/04_variables.md:6
msgid ""
"**Note**: In other programming languages, a distinction is made between "
"*primitive data types* (which can only store values) and *objects* (which"
" also have attributes and methods). For example, the `world` class has an"
" attribute `size` and a method `add_background`."
msgstr ""

#: ../../source/processing/04_variables.md:10
msgid ""
"Python follows a simple philosophy: **everything is an object** — which "
"is why we generally use the term *value*."
msgstr ""

#: ../../source/processing/04_variables.md:12
msgid ""
"Each value has a **data type**, which you can check using the `type()` "
"function. The following program:"
msgstr ""

#: ../../source/processing/04_variables.md:26
msgid "...produces this output on the console:"
msgstr ""

#: ../../source/processing/04_variables.md:36
#, fuzzy
msgid "Variables"
msgstr "Variablen"

#: ../../source/processing/04_variables.md:38
msgid ""
"To access stored objects later, you need to save where they are. "
"Technically, the *memory address* of an object is stored, but in Python, "
"we use **names** to refer to objects."
msgstr ""

#: ../../source/processing/04_variables.md:45
msgid ""
"This stores the line in the variable named `line`. You can now use `line`"
" to access and modify the object, for example:"
msgstr ""

#: ../../source/processing/04_variables.md:52
msgid "You can also do calculations with variables, such as:"
msgstr ""

#: ../../source/processing/04_variables.md:62
msgid "Assignments"
msgstr ""

#: ../../source/processing/04_variables.md:64
msgid "Assignments use the `=` symbol:"
msgstr ""

#: ../../source/processing/04_variables.md:70
msgid "This means:"
msgstr ""

#: ../../source/processing/04_variables.md:72
msgid "First, the **expression on the right** is evaluated."
msgstr ""

#: ../../source/processing/04_variables.md:73
msgid "Then, the **result** is stored in the variable on the left."
msgstr ""

#: ../../source/processing/04_variables.md:75
msgid "After this code:"
msgstr ""

#: ../../source/processing/04_variables.md:83
msgid "`a` has the value `3`"
msgstr ""

#: ../../source/processing/04_variables.md:84
msgid "`b` has the value `4`"
msgstr ""

#: ../../source/processing/04_variables.md:85
msgid "`c` has the value `7`"
msgstr ""

#: ../../source/processing/04_variables.md:87
msgid ""
"You can also update object attributes, like moving a circle left or right"
" using the keyboard:"
msgstr ""

#: ../../source/processing/04_variables.md:106
msgid "The line `circle.x = circle.x + 1` means:"
msgstr ""

#: ../../source/processing/04_variables.md:108
msgid "Compute `circle.x + 1`"
msgstr ""

#: ../../source/processing/04_variables.md:109
msgid "Store the result back into `circle.x`"
msgstr ""

#: ../../source/processing/04_variables.md:111
msgid ""
"**Note**: `=` does not mean mathematical equality. Instead, the right-"
"hand expression is evaluated and the result is **assigned** to the left-"
"hand side."
msgstr ""

#: ../../source/processing/04_variables.md:115
msgid ""
"Some programming languages use a different symbol to avoid confusion for "
"beginners."
msgstr ""

#: ../../source/processing/04_variables.md:119
msgid "Usage"
msgstr ""

#: ../../source/processing/04_variables.md:121
msgid ""
"You can use variables wherever you would use a number or string — as long"
" as the **data type** is correct:"
msgstr ""

#: ../../source/processing/04_variables.md:129
msgid "This works because `(a, b)` is a tuple — exactly what `Line` expects."
msgstr ""

#: ../../source/processing/04_variables.md:131
msgid "But this will raise an error:"
msgstr ""

#: ../../source/processing/04_variables.md:139
msgid ""
"`Line` expects a tuple as the first argument, but `a` is an integer. The "
"error will be:"
msgstr ""

#: ../../source/processing/04_variables.md:146
msgid "Reading error messages often helps identify mistakes."
msgstr ""

#: ../../source/processing/04_variables.md:150
msgid "Scope"
msgstr ""

#: ../../source/processing/04_variables.md:152
msgid ""
"In larger programs — especially when working in teams — variable names "
"and their **scope** are important to prevent conflicts."
msgstr ""

#: ../../source/processing/04_variables.md:154
msgid "A variable has different **scopes** depending on where it's defined:"
msgstr ""

#: ../../source/processing/04_variables.md:156
msgid ""
"A variable **inside** a function has **local scope** — it's only visible "
"within that function."
msgstr ""

#: ../../source/processing/04_variables.md:157
msgid ""
"A variable **outside** any function is **global** — visible throughout "
"the program."
msgstr ""

#: ../../source/processing/04_variables.md:159
msgid ""
"⚠️ **Important**: If you want to *modify* a global variable inside a "
"function, you must use the `global` keyword."
msgstr ""

#: ../../source/processing/04_variables.md:161
msgid "This works:"
msgstr ""

#: ../../source/processing/04_variables.md:176
msgid "Output: `3`"
msgstr ""

#: ../../source/processing/04_variables.md:180
msgid "But this does NOT work:"
msgstr ""

#: ../../source/processing/04_variables.md:196
msgid ""
"This causes an error because `a` is treated as a local variable, but "
"hasn’t been initialized yet."
msgstr ""

#: ../../source/processing/04_variables.md:200
msgid "This works again using `global`:"
msgstr ""

#~ msgid ""
#~ "Ein `Wert` ist etwas, dass im "
#~ "Computer gespeichert wird und von einem"
#~ " Computer-Programm manipuliert werden kann."
#~ " Im Folgenden werden Werte als "
#~ "``Objekte`` bezeichnet und die Wörter "
#~ "werden synonym verwendet."
#~ msgstr ""
#~ "A value is something that is "
#~ "stored in the computer and can be"
#~ " manipulated by a computer program. "
#~ "In the following, values are referred"
#~ " to as ``objects`` and the words "
#~ "are used synonymously."

#~ msgid ""
#~ "In anderen Programmiersprachen unterscheidet "
#~ "man primitive Datentypen, die nur "
#~ "verändert werden können und **Objekte**, "
#~ "welche oft auch Attribute und Methoden"
#~ " mitbringen, wie z.B. die Klasse "
#~ "``world``, welche das Attribut ``size`` "
#~ "besitzt und deren Hintergrund mit der"
#~ " Methode `add_background` verwendet werden "
#~ "kann."
#~ msgstr ""
#~ "In other programming languages, a "
#~ "distinction is made between primitive "
#~ "data types, which can only be "
#~ "modified, and **objects**, which often "
#~ "also bring attributes and methods, such"
#~ " as the class ``world``, which has"
#~ " the attribute ``size`` and whose "
#~ "background can be used with the "
#~ "method `add_background`."

#~ msgid ""
#~ "Python hat die einfache Philosphie: "
#~ "Alles ist ein Objekt - Daher wird"
#~ " hier generell der Begriff *Wert* "
#~ "verwendet."
#~ msgstr ""
#~ "Python hat die einfache Philosophie: "
#~ "Alles ist ein Objekt - Daher wird"
#~ " hier generell der Begriff *Wert* "
#~ "verwendet."

#~ msgid ""
#~ "Jeder Wert hat einen Datentyp, welchen"
#~ " du abfragen kannst, z.B. liefert "
#~ "folgendes Programm:"
#~ msgstr ""
#~ "Every value has a data type, which"
#~ " you can query, for example, the "
#~ "following program provides:"

#~ msgid "Die folgende Ausgabe auf der Kommandozeile:"
#~ msgstr "The following output on the command line:"

#~ msgid ""
#~ "Damit im Computer erstellte Objekte "
#~ "wiedergefunden werden können, muss man "
#~ "speichern, wo diese zu finden ist. "
#~ "Auf technischer Ebene speichert man dazu"
#~ " den *Speicherplatz* eines Objekts im "
#~ "Rechner. In einer Programmiersprache wie "
#~ "Python verwenden wir einen Namen um "
#~ "Objekte wiederzufinden."
#~ msgstr ""
#~ "In order to find objects created "
#~ "on the computer again, one must "
#~ "save where they can be found. On"
#~ " a technical level, the *memory "
#~ "location* of an object in the "
#~ "computer is stored for this purpose. "
#~ "In a programming language like Python,"
#~ " we use a name to find objects"
#~ " again."

#~ msgid ""
#~ "speichert die Linie unter dem Namen "
#~ "line. Wenn du jetzt den Namen line"
#~ " verwendest, kannst du auf die "
#~ "Variable zugreifen und das Objekt "
#~ "verändern."
#~ msgstr ""
#~ "Stores the line under the name "
#~ "line. If you now use the name "
#~ "line, you can access the variable "
#~ "and modify the object."

#~ msgid ""
#~ "Du hast z.B. in den vorherigen "
#~ "Kapiteln schon die Farbe einer Linie "
#~ "verändert:"
#~ msgstr ""
#~ "For example, in the previous chapters,"
#~ " you have already changed the color"
#~ " of a line:"

#~ msgid "Genauso kannst du z.B. auch mit Zahlen rechnen"
#~ msgstr "In gleicher Weise kannst du z.B. auch mit Zahlen rechnen"

#~ msgid "Zuweisungen"
#~ msgstr "Assignments"

#~ msgid "Zuweisungen schreibt man als:"
#~ msgstr "Assignments are written as:"

#~ msgid "Die bedeutet:"
#~ msgstr "Das bedeutet:"

#~ msgid "Zuerst wird das Ergebnis auf der rechten Seite ausgewertet."
#~ msgstr "First, the result on the right side is evaluated."

#~ msgid ""
#~ "Dann wird das Ergebnis in die "
#~ "Variable auf der linken Seite "
#~ "gespeichert."
#~ msgstr "Then the result is stored in the variable on the left side."

#~ msgid "Nach folgendem Programm:"
#~ msgstr "According to the following program:"

#~ msgid "hat a den Wert 3, b den Wert 4 und c den Wert 7."
#~ msgstr "a hat den Wert 3, b den Wert 4 und c den Wert 7."

#~ msgid ""
#~ "Genauso kannst du aber auch Werte "
#~ "von Objekten, z.B. die Position eines"
#~ " Kreises verändern. Das folgende Programm"
#~ " lässt dich einen Kreis mit den "
#~ "Tasten a und d nach links oder "
#~ "rechts bewegen. Die x-Position ist über"
#~ " den Namen ``circle.x`` zugreifbar und "
#~ "kann auch so verändert werden."
#~ msgstr ""
#~ "In gleicher Weise kannst du aber "
#~ "auch Werte von Objekten, z.B. die "
#~ "Position eines Kreises, verändern. Das "
#~ "folgende Programm lässt dich einen Kreis"
#~ " mit den Tasten a und d nach"
#~ " links oder rechts bewegen. Die "
#~ "x-Position ist über den Namen "
#~ "``circle.x`` zugreifbar und kann auch so"
#~ " verändert werden."

#~ msgid ""
#~ "Die Zeile ``circle.x = circle.x + "
#~ "1`` sagt folgendes: Berechne zuerst den"
#~ " Wert ``circle.x + 1`` (d.h. erhöhe"
#~ " die x-Koordinate des Kreises um 1.)"
#~ " und speichere das Ergebnis dieser "
#~ "Berechnung wieder in ``circle.x``."
#~ msgstr ""
#~ "The line ``circle.x = circle.x + "
#~ "1`` says the following: First calculate"
#~ " the value ``circle.x + 1`` (i.e.,"
#~ " increase the x-coordinate of the "
#~ "circle by 1) and store the result"
#~ " of this calculation back in "
#~ "``circle.x``."

#~ msgid ""
#~ "Das = bedeutet nicht das der "
#~ "Ausdruck links und rechts mathematisch "
#~ "gleich ist.  Stattdessen wird das "
#~ "Ergebnis der rechten Seite zuerst "
#~ "ausgewertet und das Ergebnis dieser "
#~ "Berechnung in die Variable auf der "
#~ "linken Seite gespeichert."
#~ msgstr ""
#~ "Das = bedeutet nicht, dass der "
#~ "Ausdruck links und rechts mathematisch "
#~ "gleich ist. Stattdessen wird das "
#~ "Ergebnis der rechten Seite zuerst "
#~ "ausgewertet und das Ergebnis dieser "
#~ "Berechnung in die Variable auf der "
#~ "linken Seite gespeichert."

#~ msgid "Man liest den Ausdruck ``a = b`` als b wird a **zugewiesen**."
#~ msgstr "One reads the expression ``a = b`` as b is **assigned** to a."

#~ msgid ""
#~ "Manche Programmiersprachen verwenden statt dem"
#~ " = Zeichen ein anderes Zeichen um "
#~ "Verwirrung bei Programmieranfängern zu "
#~ "vermeiden."
#~ msgstr ""
#~ "Some programming languages use a "
#~ "different symbol instead of the = "
#~ "sign to avoid confusion among beginner"
#~ " programmers."

#~ msgid "Verwendung"
#~ msgstr "Verwendung"

#~ msgid ""
#~ "Überall wo du bisher eine Zahl "
#~ "oder einen Text verwendet hast, kannst"
#~ " du auch direkt Variablen einsetzen, "
#~ "z.B."
#~ msgstr ""
#~ "Everywhere you have used a number "
#~ "or text so far, you can also "
#~ "directly use variables, e.g."

#~ msgid ""
#~ "Dies funktioniert immer dann, wenn der"
#~ " **Datentyp** der Variablen mit dem "
#~ "erwarteten **Datentyp** übereinstimmt."
#~ msgstr ""
#~ "This works whenever the **data type**"
#~ " of the variable matches the expected"
#~ " **data type**."

#~ msgid "Folgender Code z.B. führt z.B. zu einem Fehler:"
#~ msgstr "Der folgende Code z.B. führt z.B. zu einem Fehler:"

#~ msgid ""
#~ "Line erwartet ein Tupel und erhält "
#~ "aber nur eine Integer-Variable. Daher"
#~ " wird folgender Fehler ausgegeben"
#~ msgstr ""
#~ "Line erwartet ein Tupel und erhält "
#~ "aber nur eine Integer-Variable. Daher"
#~ " wird folgender Fehler ausgegeben"

#~ msgid ""
#~ "Der Fehler versucht dir einen Hinweis"
#~ " zu geben, was du falsch gemacht "
#~ "hast, oft hilft es also die "
#~ "Fehlermeldungen zu lesen."
#~ msgstr ""
#~ "The error is trying to give you"
#~ " a hint about what you did "
#~ "wrong, so it often helps to read"
#~ " the error messages."

#~ msgid "Gültigkeitsbereich - Scope"
#~ msgstr "Gültigkeitsbereich - Umfang"

#~ msgid ""
#~ "Wenn Programmierer größere Programme schreiben"
#~ " -und das auch oft im Team-, "
#~ "dann kommt dem Namen von Variablen "
#~ "eine besondere Bedeutung zu: Wie "
#~ "verhindert man, dass andere Programmierer "
#~ "die eigenen Variablennamen verwenden und "
#~ "dadurch sogar unvorhergesehene Nebenwirkungen "
#~ "verursachen können?"
#~ msgstr ""
#~ "When programmers write larger programs -"
#~ " often in a team - the names"
#~ " of variables take on special "
#~ "significance: How can one prevent other"
#~ " programmers from using their own "
#~ "variable names and potentially causing "
#~ "unforeseen side effects?"

#~ msgid ""
#~ "Die Antwort darauf sind \"Gültigkeitsbereiche:"
#~ " Eine Variable hat unterschiedliche "
#~ "Gültigkeitsbereiche, je nachdem wo sie "
#~ "definiert wurde:"
#~ msgstr ""
#~ "The answer to this is \"Scopes: A"
#~ " variable has different scopes depending"
#~ " on where it was defined:"

#~ msgid ""
#~ "Eine Variable die innerhalb einer "
#~ "Funktion eingeführt wird hat einen "
#~ "lokalen Gültigkeitsbereich. Sie ist innerhalb"
#~ " dieser Funktion **lokal** sichtbar, aber"
#~ " nicht innerhalb von anderen Funktionen."
#~ msgstr ""
#~ "A variable introduced within a function"
#~ " has a local scope. It is "
#~ "**locally** visible within this function, "
#~ "but not within other functions."

#~ msgid ""
#~ "Eine Variable die außerhalb einer "
#~ "Funktion definiert wurde, ist **global** "
#~ "sichtbar und kann in allen Funktionen"
#~ " deines Programms verwendet werden. "
#~ "**Achtung**: Wenn man auf globale "
#~ "Variablen zugreifen und diese verändern "
#~ "will, muss man das Schlüsselwort global"
#~ " verwenden."
#~ msgstr ""
#~ "A variable defined outside a function"
#~ " is **globally** visible and can be"
#~ " used in all functions of your "
#~ "program. **Warning**: If you want to "
#~ "access and modify global variables, you"
#~ " must use the global keyworld."

#~ msgid "Folgendes funktioniert:"
#~ msgstr "The following works:"

#~ msgid "Es wird der Wert 3 ausgegeben."
#~ msgstr "The value 3 is output."

#~ msgid ""
#~ "Dies funktioniert aber nicht, da bei "
#~ "der Zuweisung a als lokale Variable "
#~ "interpretiert wird (die nicht definiert "
#~ "wurde)"
#~ msgstr ""
#~ "This does not work, however, because "
#~ "when assigning, a is interpreted as "
#~ "a local variable (which was not "
#~ "defined)"

#~ msgid ""
#~ "Dies funktioniert wieder, da a als "
#~ "globale Variable definiert wird und "
#~ "daher auch auf die globale Variable "
#~ "zugegriffen wird."
#~ msgstr ""
#~ "This works again because a is "
#~ "defined as a global variable and "
#~ "therefore the global variable is also"
#~ " accessed."

