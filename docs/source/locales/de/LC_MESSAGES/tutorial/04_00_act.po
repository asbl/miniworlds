# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Andreas Siebel
# This file is distributed under the same license as the miniworlds package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: miniworlds 2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-09 08:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: gpt-po v1.1.1\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/tutorial/04_00_act.md:1
msgid "Act"
msgstr "Act"

#: ../../source/tutorial/04_00_act.md:3
msgid ""
"So far, you’ve learned how to create worlds and place actors in them. Now"
" it’s time to bring things to life:"
msgstr ""
"Bis jetzt hast du gelernt, wie man Worlds erstellt und Actors darin "
"platziert. Jetzt ist es Zeit, alles zum Leben zu erwecken:"

#: ../../source/tutorial/04_00_act.md:6
msgid "The `act()` Method"
msgstr "Die Methode `act()`"

#: ../../source/tutorial/04_00_act.md:8
msgid ""
"The `act()` method controls the behavior of your world and all its "
"actors. It is called once every frame (i.e., every `world.step` time "
"unit), continuing until the program ends."
msgstr ""
"Die Methode `act()` steuert das Verhalten deiner World und aller "
"enthaltenen Actors. Sie wird in jedem Frame (also bei jedem `world.step`)"
" aufgerufen und läuft, bis das Programm beendet wird."

#: ../../source/tutorial/04_00_act.md:11
msgid "![First Actor](../_images/act.png)"
msgstr "![Erster Actor](../_images/act.png)"

#: ../../source/tutorial/04_00_act.md:11
msgid "First Actor"
msgstr "Erster Actor"

#: ../../source/tutorial/04_00_act.md:13
msgid "Example: Moving Actor"
msgstr "Beispiel: Bewegender Actor"

#: ../../source/tutorial/04_00_act.md:15
msgid ""
"When you create an `Actor`, you can define its `act()` method and "
"register it using the `@register` decorator:"
msgstr ""
"Wenn du einen `Actor` erstellst, kannst du seine Methode `act()` "
"definieren und mit dem Decorator `@register` registrieren:"

#: ../../source/tutorial/04_00_act.md:33
msgid "Explanation"
msgstr "Erklärung"

#: ../../source/tutorial/04_00_act.md:35
msgid "The `act()` method moves the `player` up by one unit on every frame."
msgstr ""
"Die Methode `act()` bewegt den `player` in jedem Frame um eine Einheit "
"nach oben."

#: ../../source/tutorial/04_00_act.md:36
msgid ""
"New here is the use of `self`, which lets the object refer to itself. So "
"the line `self.y = self.y - 1` means the `player` object is reducing its "
"own y-coordinate by 1."
msgstr ""
"Neu ist hier die Verwendung von `self`, wodurch das Objekt auf sich "
"selbst zugreifen kann. Die Zeile `self.y = self.y - 1` bedeutet, dass das"
" Objekt `player` seine eigene y-Koordinate um 1 verringert."

#: ../../source/tutorial/04_00_act.md:39
#, fuzzy, python-brace-format
msgid ""
"\\:::{seealso} For more on methods and how to use `self`, see "
"[here](concepts/concept_self.md). \\:::"
msgstr ""
"\\:::{seealso} Mehr über Methoden und die Verwendung von `self` findest "
"du [hier](concept_self.md). \\:::"

