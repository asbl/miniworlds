#: ../../source/concepts/concept_imports.md:1
msgid "Concept: Imports"
msgstr "Konzept: Importe"

#: ../../source/concepts/concept_imports.md:3
msgid ""
"With `import`, you can include libraries and use the classes and "
"functions they provide. There are different ways to import libraries in "
"Python."
msgstr ""
"Mit `import` kannst du Bibliotheken einbinden und die darin enthaltenen Klassen und "
"Funktionen verwenden. In Python gibt es verschiedene Möglichkeiten, Bibliotheken zu importieren."

#: ../../source/concepts/concept_imports.md:8
msgid "Different Types of Imports"
msgstr "Verschiedene Arten von Imports"

#: ../../source/concepts/concept_imports.md:10
msgid ""
"In Python, you can import libraries in several ways. All of the following"
" lines are valid:"
msgstr ""
"In Python kannst du Bibliotheken auf unterschiedliche Weise importieren. Alle der folgenden "
"Zeilen sind gültig:"

#: ../../source/concepts/concept_imports.md:19
msgid ""
"In the first form `import miniworlds`, you need to prefix everything with"
" `miniworlds.` — e.g., `miniworlds.World()`."
msgstr ""
"Bei der ersten Variante `import miniworlds` musst du alle Objekte mit `miniworlds.` "
"vorsetzen – also z. B. `miniworlds.World()` schreiben."

#: ../../source/concepts/concept_imports.md:21
msgid ""
"Alternatively, you can write `from miniworlds import *`, which allows you"
" to omit the `miniworlds.` prefix and write `World()` directly."
msgstr ""
"Alternativ kannst du `from miniworlds import *` schreiben. Dann kannst du das Präfix "
"`miniworlds.` weglassen und direkt `World()` schreiben."

#: ../../source/concepts/concept_imports.md:23
msgid "Here’s how a simple program would look using `import miniworlds`:"
msgstr "So würde ein einfaches Programm mit `import miniworlds` aussehen:"

#: ../../source/concepts/concept_imports.md:39
msgid "Explicit vs. Implicit Imports"
msgstr "Explizit vs. Implizit"

#: ../../source/concepts/concept_imports.md:41
msgid ""
"Using `miniworlds.object` may seem more verbose, but it is the "
"**preferred** method in Python."
msgstr ""
"`miniworlds.object` zu verwenden wirkt vielleicht etwas umständlicher, ist aber in Python "
"die **bevorzugte** Methode."

#: ../../source/concepts/concept_imports.md:43
msgid ""
"Why? Because it makes your code **more readable** — it’s immediately "
"clear which library a function or class comes from."
msgstr ""
"Warum? Weil dein Code dadurch **lesbarer** wird – es ist sofort erkennbar, "
"aus welcher Bibliothek eine Funktion oder Klasse stammt."

#: ../../source/concepts/concept_imports.md:45
msgid ""
"For example, if you define your own class named `TiledWorld`, it would "
"clash with the imported name. By using the prefix "
"(`miniworlds.TiledWorld`), you avoid confusion."
msgstr ""
"Wenn du z. B. eine eigene Klasse namens `TiledWorld` definierst, würde das mit der importierten "
"Klasse kollidieren. Durch das Präfix (`miniworlds.TiledWorld`) vermeidest du solche Verwechslungen."

#: ../../source/concepts/concept_imports.md:48
msgid "This follows the Python Zen principle:"
msgstr "Das folgt dem Python-Zen-Prinzip:"

#: ../../source/concepts/concept_imports.md:50
msgid "**Explicit is better than implicit.**"
msgstr "**Explizit ist besser als implizit.**"

#: ../../source/concepts/concept_imports.md:54
msgid "Aliases"
msgstr "Aliase"

#: ../../source/concepts/concept_imports.md:56
msgid "The third option is a **compromise** between the two styles."
msgstr "Die dritte Option ist ein **Kompromiss** zwischen den beiden Varianten."

#: ../../source/concepts/concept_imports.md:58
msgid ""
"If you find `miniworlds` too long, you can use an alias — for example, "
"`mwm`:"
msgstr ""
"Wenn dir `miniworlds` zu lang ist, kannst du einen Alias verwenden — zum Beispiel `mwm`:"

#: ../../source/concepts/concept_imports.md:74
msgid "Notes for Teachers"
msgstr "Hinweise für Lehrkräfte"

#: ../../source/concepts/concept_imports.md:76
msgid ""
"Both styles of import are used throughout these tutorials. As a teacher, "
"you may wish to **standardize** one approach for beginners."
msgstr ""
"In diesen Tutorials werden beide Import-Stile verwendet. Als Lehrkraft kannst du entscheiden, "
"ob du für Einsteiger **einen Stil standardisieren** möchtest."

#: ../../source/concepts/concept_imports.md:79
msgid ""
"For students who are new to Python, it might be easier to **avoid "
"advanced import styles** (like `from ... import *`) at first."
msgstr ""
"Für Lernende, die neu in Python sind, kann es anfangs sinnvoll sein, "
"**kompliziertere Importvarianten** (wie `from ... import *`) zu vermeiden."
